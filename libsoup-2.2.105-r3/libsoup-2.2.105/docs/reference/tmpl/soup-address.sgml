<!-- ##### SECTION Title ##### -->
SoupAddress

<!-- ##### SECTION Short_Description ##### -->
Higher-level IP address object

<!-- ##### SECTION Long_Description ##### -->
<para>
#SoupAddress represents the address of a TCP connection endpoint; both
the IP address and the port. (It is somewhat like an object-oriented
version of struct #sockaddr.)
</para>

<para>
If libsoup was built with IPv6 support, #SoupAddress will allow both
IPv4 and IPv6 addresses.
</para>

<!-- ##### SECTION See_Also ##### -->
<para>

</para>

<!-- ##### SECTION Stability_Level ##### -->


<!-- ##### STRUCT SoupAddress ##### -->
<para>

</para>


<!-- ##### SIGNAL SoupAddress::dns-result ##### -->
<para>

</para>

@addr: 
@status: 

<!-- ##### ENUM SoupAddressFamily ##### -->
<para>

</para>

@SOUP_ADDRESS_FAMILY_IPV4: 
@SOUP_ADDRESS_FAMILY_IPV6: 

<!-- ##### MACRO SOUP_ADDRESS_ANY_PORT ##### -->
<para>

</para>



<!-- ##### FUNCTION soup_address_new ##### -->
<para>

</para>

@name: 
@port: 
@Returns: 


<!-- ##### FUNCTION soup_address_new_from_sockaddr ##### -->
<para>

</para>

@sa: 
@len: 
@Returns: 


<!-- ##### FUNCTION soup_address_new_any ##### -->
<para>

</para>

@family: 
@port: 
@Returns: 


<!-- ##### USER_FUNCTION SoupAddressCallback ##### -->
<para>

</para>

@addr: 
@status: 
@data: 


<!-- ##### FUNCTION soup_address_resolve_async ##### -->
<para>

</para>

@addr: 
@callback: 
@user_data: 


<!-- ##### FUNCTION soup_address_resolve_async_full ##### -->
<para>

</para>

@addr: 
@async_context: 
@callback: 
@user_data: 


<!-- ##### FUNCTION soup_address_resolve_sync ##### -->
<para>

</para>

@addr: 
@Returns: 


<!-- ##### FUNCTION soup_address_get_name ##### -->
<para>

</para>

@addr: 
@Returns: 


<!-- ##### FUNCTION soup_address_get_sockaddr ##### -->
<para>

</para>

@addr: 
@len: 
@Returns: 


<!-- ##### FUNCTION soup_address_get_physical ##### -->
<para>

</para>

@addr: 
@Returns: 


<!-- ##### FUNCTION soup_address_get_port ##### -->
<para>

</para>

@addr: 
@Returns: 


