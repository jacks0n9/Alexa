<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" 
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<refentry id="SoupAddress">
<refmeta>
<refentrytitle role="top_of_page">SoupAddress</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>LIBSOUP Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>SoupAddress</refname>
<refpurpose>Higher-level IP address object</refpurpose>
<!--[<xref linkend="desc" endterm="desc.title"/>]-->
</refnamediv>

<refsynopsisdiv role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>



struct              <link linkend="SoupAddress-struct">SoupAddress</link>;
enum                <link linkend="SoupAddressFamily">SoupAddressFamily</link>;
#define             <link linkend="SOUP-ADDRESS-ANY-PORT:CAPS">SOUP_ADDRESS_ANY_PORT</link>
<link linkend="SoupAddress">SoupAddress</link>*        <link linkend="soup-address-new">soup_address_new</link>                    (const <link linkend="char">char</link> *name,
                                                         <link linkend="guint">guint</link> port);
<link linkend="SoupAddress">SoupAddress</link>*        <link linkend="soup-address-new-from-sockaddr">soup_address_new_from_sockaddr</link>      (<link linkend="struct-sockaddr">struct sockaddr</link> *sa,
                                                         <link linkend="int">int</link> len);
<link linkend="SoupAddress">SoupAddress</link>*        <link linkend="soup-address-new-any">soup_address_new_any</link>                (<link linkend="SoupAddressFamily">SoupAddressFamily</link> family,
                                                         <link linkend="guint">guint</link> port);
<link linkend="void">void</link>                (<link linkend="SoupAddressCallback">*SoupAddressCallback</link>)              (<link linkend="SoupAddress">SoupAddress</link> *addr,
                                                         <link linkend="guint">guint</link> status,
                                                         <link linkend="gpointer">gpointer</link> data);
<link linkend="void">void</link>                <link linkend="soup-address-resolve-async">soup_address_resolve_async</link>          (<link linkend="SoupAddress">SoupAddress</link> *addr,
                                                         <link linkend="SoupAddressCallback">SoupAddressCallback</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data);
<link linkend="void">void</link>                <link linkend="soup-address-resolve-async-full">soup_address_resolve_async_full</link>     (<link linkend="SoupAddress">SoupAddress</link> *addr,
                                                         <link linkend="GMainContext">GMainContext</link> *async_context,
                                                         <link linkend="SoupAddressCallback">SoupAddressCallback</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data);
<link linkend="guint">guint</link>               <link linkend="soup-address-resolve-sync">soup_address_resolve_sync</link>           (<link linkend="SoupAddress">SoupAddress</link> *addr);
const <link linkend="char">char</link>*         <link linkend="soup-address-get-name">soup_address_get_name</link>               (<link linkend="SoupAddress">SoupAddress</link> *addr);
struct <link linkend="sockaddr">sockaddr</link>*    <link linkend="soup-address-get-sockaddr">soup_address_get_sockaddr</link>           (<link linkend="SoupAddress">SoupAddress</link> *addr,
                                                         <link linkend="int">int</link> *len);
const <link linkend="char">char</link>*         <link linkend="soup-address-get-physical">soup_address_get_physical</link>           (<link linkend="SoupAddress">SoupAddress</link> *addr);
<link linkend="guint">guint</link>               <link linkend="soup-address-get-port">soup_address_get_port</link>               (<link linkend="SoupAddress">SoupAddress</link> *addr);

</synopsis>
</refsynopsisdiv>

<refsect1 role="object_hierarchy">
<title role="object_hierarchy.title">Object Hierarchy</title>
<synopsis>

  <link linkend="GObject">GObject</link>
   +----SoupAddress
</synopsis>

</refsect1>






<refsect1 role="signal_proto">
<title role="signal_proto.title">Signals</title>
<synopsis>

  &quot;<link linkend="SoupAddress-dns-result">dns-result</link>&quot;                                     : Run First
</synopsis>
</refsect1>


<refsect1 role="desc">
<title role="desc.title">Description</title>
<para>
<link linkend="SoupAddress"><type>SoupAddress</type></link> represents the address of a TCP connection endpoint; both
the IP address and the port. (It is somewhat like an object-oriented
version of struct <link linkend="sockaddr"><type>sockaddr</type></link>.)
</para>

<para>
If libsoup was built with IPv6 support, <link linkend="SoupAddress"><type>SoupAddress</type></link> will allow both
IPv4 and IPv6 addresses.
</para>
</refsect1>

<refsect1 role="details">
<title role="details.title">Details</title>
<refsect2>
<title><anchor id="SoupAddress-struct" role="struct"/>struct SoupAddress</title>
<indexterm><primary>SoupAddress</primary></indexterm><programlisting>struct SoupAddress;</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="SoupAddressFamily" role="enum"/>enum SoupAddressFamily</title>
<indexterm><primary>SoupAddressFamily</primary></indexterm><programlisting>typedef enum {
	SOUP_ADDRESS_FAMILY_IPV4 = AF_INET,
	SOUP_ADDRESS_FAMILY_IPV6 = AF_INET6
} SoupAddressFamily;
</programlisting>
<para>
The supported address families. Note that the
<link linkend="SOUP-ADDRESS-FAMILY-IPV6:CAPS"><literal>SOUP_ADDRESS_FAMILY_IPV6</literal></link> constant is available even if libsoup was
built without IPv6 support, but attempting to create an IPv6
address will fail in that case.</para>
<para>

</para><variablelist role="enum">
<varlistentry>
<term><anchor id="SOUP-ADDRESS-FAMILY-IPV4:CAPS" role="constant"/><literal>SOUP_ADDRESS_FAMILY_IPV4</literal></term>
<listitem><simpara> an IPv4 address
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="SOUP-ADDRESS-FAMILY-IPV6:CAPS" role="constant"/><literal>SOUP_ADDRESS_FAMILY_IPV6</literal></term>
<listitem><simpara> an IPv6 address
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="SOUP-ADDRESS-ANY-PORT:CAPS" role="macro"/>SOUP_ADDRESS_ANY_PORT</title>
<indexterm><primary>SOUP_ADDRESS_ANY_PORT</primary></indexterm><programlisting>#define SOUP_ADDRESS_ANY_PORT 0
</programlisting>
<para>
This can be passed to any <link linkend="SoupAddress"><type>SoupAddress</type></link> method that expects a port,
to indicate that you don't care what port is used.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="soup-address-new" role="function"/>soup_address_new ()</title>
<indexterm><primary>soup_address_new</primary></indexterm><programlisting><link linkend="SoupAddress">SoupAddress</link>*        soup_address_new                    (const <link linkend="char">char</link> *name,
                                                         <link linkend="guint">guint</link> port);</programlisting>
<para>
Creates a <link linkend="SoupAddress"><type>SoupAddress</type></link> from <parameter>name</parameter> and <parameter>port</parameter>. The <link linkend="SoupAddress"><type>SoupAddress</type></link>'s IP
address may not be available right away; the caller can call
<link linkend="soup-address-resolve-async"><function>soup_address_resolve_async()</function></link> or <link linkend="soup-address-resolve-sync"><function>soup_address_resolve_sync()</function></link> to
force a DNS resolution.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>name</parameter>&nbsp;:</term>
<listitem><simpara> a hostname or physical address
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>port</parameter>&nbsp;:</term>
<listitem><simpara> a port number
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a <link linkend="SoupAddress"><type>SoupAddress</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-address-new-from-sockaddr" role="function"/>soup_address_new_from_sockaddr ()</title>
<indexterm><primary>soup_address_new_from_sockaddr</primary></indexterm><programlisting><link linkend="SoupAddress">SoupAddress</link>*        soup_address_new_from_sockaddr      (<link linkend="struct-sockaddr">struct sockaddr</link> *sa,
                                                         <link linkend="int">int</link> len);</programlisting>
<para>
Returns a <link linkend="SoupAddress"><type>SoupAddress</type></link> equivalent to <parameter>sa</parameter> (or <link linkend="NULL:CAPS"><literal>NULL</literal></link> if <parameter>sa</parameter>'s
address family isn't supported)</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>sa</parameter>&nbsp;:</term>
<listitem><simpara> a pointer to a sockaddr
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>len</parameter>&nbsp;:</term>
<listitem><simpara> size of <parameter>sa</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the new <link linkend="SoupAddress"><type>SoupAddress</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-address-new-any" role="function"/>soup_address_new_any ()</title>
<indexterm><primary>soup_address_new_any</primary></indexterm><programlisting><link linkend="SoupAddress">SoupAddress</link>*        soup_address_new_any                (<link linkend="SoupAddressFamily">SoupAddressFamily</link> family,
                                                         <link linkend="guint">guint</link> port);</programlisting>
<para>
Returns a <link linkend="SoupAddress"><type>SoupAddress</type></link> corresponding to the "any" address
for <parameter>family</parameter> (or <link linkend="NULL:CAPS"><literal>NULL</literal></link> if <parameter>family</parameter> isn't supported), suitable for
passing to <link linkend="soup-socket-server-new"><function>soup_socket_server_new()</function></link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>family</parameter>&nbsp;:</term>
<listitem><simpara> the address family
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>port</parameter>&nbsp;:</term>
<listitem><simpara> the port number (usually <link linkend="SOUP-ADDRESS-ANY-PORT:CAPS"><literal>SOUP_ADDRESS_ANY_PORT</literal></link>)
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the new <link linkend="SoupAddress"><type>SoupAddress</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="SoupAddressCallback" role="function"/>SoupAddressCallback ()</title>
<indexterm><primary>SoupAddressCallback</primary></indexterm><programlisting><link linkend="void">void</link>                (*SoupAddressCallback)              (<link linkend="SoupAddress">SoupAddress</link> *addr,
                                                         <link linkend="guint">guint</link> status,
                                                         <link linkend="gpointer">gpointer</link> data);</programlisting>
<para>
The callback function passed to <link linkend="soup-address-resolve-async"><function>soup_address_resolve_async()</function></link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>addr</parameter>&nbsp;:</term>
<listitem><simpara> the <link linkend="SoupAddress"><type>SoupAddress</type></link> that was resolved
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>status</parameter>&nbsp;:</term>
<listitem><simpara> <link linkend="SOUP-STATUS-OK:CAPS"><literal>SOUP_STATUS_OK</literal></link> or <link linkend="SOUP-STATUS-CANT-RESOLVE:CAPS"><literal>SOUP_STATUS_CANT_RESOLVE</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&nbsp;:</term>
<listitem><simpara> the user data that was passed to
<link linkend="soup-address-resolve-async"><function>soup_address_resolve_async()</function></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-address-resolve-async" role="function"/>soup_address_resolve_async ()</title>
<indexterm><primary>soup_address_resolve_async</primary></indexterm><programlisting><link linkend="void">void</link>                soup_address_resolve_async          (<link linkend="SoupAddress">SoupAddress</link> *addr,
                                                         <link linkend="SoupAddressCallback">SoupAddressCallback</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>
Asynchronously resolves the missing half of <parameter>addr</parameter>. (Its IP address
if it was created with <link linkend="soup-address-new"><function>soup_address_new()</function></link>, or its hostname if it
was created with <link linkend="soup-address-new-from-sockaddr"><function>soup_address_new_from_sockaddr()</function></link> or
<link linkend="soup-address-new-any"><function>soup_address_new_any()</function></link>.) <parameter>callback</parameter> will be called when the
resolution finishes (successfully or not).</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>addr</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="SoupAddress"><type>SoupAddress</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&nbsp;:</term>
<listitem><simpara> callback to call with the result
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara> data for <parameter>callback</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-address-resolve-async-full" role="function"/>soup_address_resolve_async_full ()</title>
<indexterm><primary>soup_address_resolve_async_full</primary></indexterm><programlisting><link linkend="void">void</link>                soup_address_resolve_async_full     (<link linkend="SoupAddress">SoupAddress</link> *addr,
                                                         <link linkend="GMainContext">GMainContext</link> *async_context,
                                                         <link linkend="SoupAddressCallback">SoupAddressCallback</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>
Like <link linkend="soup-address-resolve-async"><function>soup_address_resolve_async()</function></link>, but calls <parameter>callback</parameter> from
the given <parameter>async_context</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>addr</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="SoupAddress"><type>SoupAddress</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>async_context</parameter>&nbsp;:</term>
<listitem><simpara> the <link linkend="GMainContext"><type>GMainContext</type></link> to call <parameter>callback</parameter> from
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&nbsp;:</term>
<listitem><simpara> callback to call with the result
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara> data for <parameter>callback</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-address-resolve-sync" role="function"/>soup_address_resolve_sync ()</title>
<indexterm><primary>soup_address_resolve_sync</primary></indexterm><programlisting><link linkend="guint">guint</link>               soup_address_resolve_sync           (<link linkend="SoupAddress">SoupAddress</link> *addr);</programlisting>
<para>
Synchronously resolves the missing half of <parameter>addr</parameter>, as with
<link linkend="soup-address-resolve-async"><function>soup_address_resolve_async()</function></link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>addr</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="SoupAddress"><type>SoupAddress</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <link linkend="SOUP-STATUS-OK:CAPS"><literal>SOUP_STATUS_OK</literal></link> or <link linkend="SOUP-STATUS-CANT-RESOLVE:CAPS"><literal>SOUP_STATUS_CANT_RESOLVE</literal></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-address-get-name" role="function"/>soup_address_get_name ()</title>
<indexterm><primary>soup_address_get_name</primary></indexterm><programlisting>const <link linkend="char">char</link>*         soup_address_get_name               (<link linkend="SoupAddress">SoupAddress</link> *addr);</programlisting>
<para>
Returns the hostname associated with <parameter>addr</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>addr</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="SoupAddress"><type>SoupAddress</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the hostname, or <link linkend="NULL:CAPS"><literal>NULL</literal></link> if it is not known.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-address-get-sockaddr" role="function"/>soup_address_get_sockaddr ()</title>
<indexterm><primary>soup_address_get_sockaddr</primary></indexterm><programlisting>struct <link linkend="sockaddr">sockaddr</link>*    soup_address_get_sockaddr           (<link linkend="SoupAddress">SoupAddress</link> *addr,
                                                         <link linkend="int">int</link> *len);</programlisting>
<para>
Returns the sockaddr associated with <parameter>addr</parameter>, with its length in
*<parameter>len</parameter>. If the sockaddr is not yet known, returns <link linkend="NULL:CAPS"><literal>NULL</literal></link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>addr</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="SoupAddress"><type>SoupAddress</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>len</parameter>&nbsp;:</term>
<listitem><simpara> return location for sockaddr length
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the sockaddr, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-address-get-physical" role="function"/>soup_address_get_physical ()</title>
<indexterm><primary>soup_address_get_physical</primary></indexterm><programlisting>const <link linkend="char">char</link>*         soup_address_get_physical           (<link linkend="SoupAddress">SoupAddress</link> *addr);</programlisting>
<para>
Returns the physical address associated with <parameter>addr</parameter> as a string.
(Eg, "127.0.0.1"). If the address is not yet known, returns <link linkend="NULL:CAPS"><literal>NULL</literal></link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>addr</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="SoupAddress"><type>SoupAddress</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the physical address, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-address-get-port" role="function"/>soup_address_get_port ()</title>
<indexterm><primary>soup_address_get_port</primary></indexterm><programlisting><link linkend="guint">guint</link>               soup_address_get_port               (<link linkend="SoupAddress">SoupAddress</link> *addr);</programlisting>
<para>
Returns the port associated with <parameter>addr</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>addr</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="SoupAddress"><type>SoupAddress</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the port
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>

<refsect1 role="signals">
<title role="signals.title">Signal Details</title>
<refsect2><title><anchor id="SoupAddress-dns-result"/>The &quot;dns-result&quot; signal</title>
<indexterm><primary>SoupAddress::dns-result</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="SoupAddress">SoupAddress</link> *addr,
                                                        <link linkend="gint">gint</link>         status,
                                                        <link linkend="gpointer">gpointer</link>     user_data)      : Run First</programlisting>
<para>
Emitted when an address resolution completes. (This is used
internally by <link linkend="soup-address-resolve-async"><function>soup_address_resolve_async()</function></link> itself.)</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>addr</parameter>&nbsp;:</term>
<listitem><simpara> the <link linkend="SoupAddress"><type>SoupAddress</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>status</parameter>&nbsp;:</term>
<listitem><simpara> the DNS status code
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2>
</refsect1>



</refentry>
