<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" 
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<refentry id="SoupMessage">
<refmeta>
<refentrytitle role="top_of_page">SoupMessage</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>LIBSOUP Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>SoupMessage</refname>
<refpurpose>An HTTP request and response.</refpurpose>
<!--[<xref linkend="desc" endterm="desc.title"/>]-->
</refnamediv>

<refsynopsisdiv role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>



struct              <link linkend="SoupMessage-struct">SoupMessage</link>;
enum                <link linkend="SoupMessageStatus">SoupMessageStatus</link>;
#define             <link linkend="SOUP-MESSAGE-IS-STARTING:CAPS">SOUP_MESSAGE_IS_STARTING</link>            (msg)
enum                <link linkend="SoupTransferEncoding">SoupTransferEncoding</link>;
enum                <link linkend="SoupOwnership">SoupOwnership</link>;
                    <link linkend="SoupDataBuffer">SoupDataBuffer</link>;
<link linkend="void">void</link>                (<link linkend="SoupMessageCallbackFn">*SoupMessageCallbackFn</link>)            (<link linkend="SoupMessage">SoupMessage</link> *req,
                                                         <link linkend="gpointer">gpointer</link> user_data);

<link linkend="SoupMessage">SoupMessage</link>*        <link linkend="soup-message-new">soup_message_new</link>                    (const <link linkend="char">char</link> *method,
                                                         const <link linkend="char">char</link> *uri_string);
<link linkend="SoupMessage">SoupMessage</link>*        <link linkend="soup-message-new-from-uri">soup_message_new_from_uri</link>           (const <link linkend="char">char</link> *method,
                                                         const <link linkend="SoupUri">SoupUri</link> *uri);
<link linkend="void">void</link>                <link linkend="soup-message-set-request">soup_message_set_request</link>            (<link linkend="SoupMessage">SoupMessage</link> *msg,
                                                         const <link linkend="char">char</link> *content_type,
                                                         <link linkend="SoupOwnership">SoupOwnership</link> req_owner,
                                                         <link linkend="char">char</link> *req_body,
                                                         <link linkend="gulong">gulong</link> req_length);
<link linkend="void">void</link>                <link linkend="soup-message-set-response">soup_message_set_response</link>           (<link linkend="SoupMessage">SoupMessage</link> *msg,
                                                         const <link linkend="char">char</link> *content_type,
                                                         <link linkend="SoupOwnership">SoupOwnership</link> resp_owner,
                                                         <link linkend="char">char</link> *resp_body,
                                                         <link linkend="gulong">gulong</link> resp_length);

<link linkend="void">void</link>                <link linkend="soup-message-add-header">soup_message_add_header</link>             (<link linkend="GHashTable">GHashTable</link> *hash,
                                                         const <link linkend="char">char</link> *name,
                                                         const <link linkend="char">char</link> *value);
const <link linkend="char">char</link>*         <link linkend="soup-message-get-header">soup_message_get_header</link>             (<link linkend="GHashTable">GHashTable</link> *hash,
                                                         const <link linkend="char">char</link> *name);
const <link linkend="GSList">GSList</link>*       <link linkend="soup-message-get-header-list">soup_message_get_header_list</link>        (<link linkend="GHashTable">GHashTable</link> *hash,
                                                         const <link linkend="char">char</link> *name);
<link linkend="void">void</link>                <link linkend="soup-message-foreach-header">soup_message_foreach_header</link>         (<link linkend="GHashTable">GHashTable</link> *hash,
                                                         <link linkend="GHFunc">GHFunc</link> func,
                                                         <link linkend="gpointer">gpointer</link> user_data);
<link linkend="void">void</link>                <link linkend="soup-message-remove-header">soup_message_remove_header</link>          (<link linkend="GHashTable">GHashTable</link> *hash,
                                                         const <link linkend="char">char</link> *name);
<link linkend="void">void</link>                <link linkend="soup-message-clear-headers">soup_message_clear_headers</link>          (<link linkend="GHashTable">GHashTable</link> *hash);

enum                <link linkend="SoupHttpVersion">SoupHttpVersion</link>;
<link linkend="void">void</link>                <link linkend="soup-message-set-http-version">soup_message_set_http_version</link>       (<link linkend="SoupMessage">SoupMessage</link> *msg,
                                                         <link linkend="SoupHttpVersion">SoupHttpVersion</link> version);
<link linkend="SoupHttpVersion">SoupHttpVersion</link>     <link linkend="soup-message-get-http-version">soup_message_get_http_version</link>       (<link linkend="SoupMessage">SoupMessage</link> *msg);
const <link linkend="SoupUri">SoupUri</link>*      <link linkend="soup-message-get-uri">soup_message_get_uri</link>                (<link linkend="SoupMessage">SoupMessage</link> *msg);
<link linkend="void">void</link>                <link linkend="soup-message-set-uri">soup_message_set_uri</link>                (<link linkend="SoupMessage">SoupMessage</link> *msg,
                                                         const <link linkend="SoupUri">SoupUri</link> *uri);
enum                <link linkend="SoupMessageFlags">SoupMessageFlags</link>;
<link linkend="void">void</link>                <link linkend="soup-message-set-flags">soup_message_set_flags</link>              (<link linkend="SoupMessage">SoupMessage</link> *msg,
                                                         <link linkend="guint">guint</link> flags);
<link linkend="guint">guint</link>               <link linkend="soup-message-get-flags">soup_message_get_flags</link>              (<link linkend="SoupMessage">SoupMessage</link> *msg);

<link linkend="void">void</link>                <link linkend="soup-message-set-status">soup_message_set_status</link>             (<link linkend="SoupMessage">SoupMessage</link> *msg,
                                                         <link linkend="guint">guint</link> status_code);
<link linkend="void">void</link>                <link linkend="soup-message-set-status-full">soup_message_set_status_full</link>        (<link linkend="SoupMessage">SoupMessage</link> *msg,
                                                         <link linkend="guint">guint</link> status_code,
                                                         const <link linkend="char">char</link> *reason_phrase);
<link linkend="void">void</link>                <link linkend="soup-message-add-chunk">soup_message_add_chunk</link>              (<link linkend="SoupMessage">SoupMessage</link> *msg,
                                                         <link linkend="SoupOwnership">SoupOwnership</link> owner,
                                                         const <link linkend="char">char</link> *body,
                                                         <link linkend="guint">guint</link> length);
<link linkend="void">void</link>                <link linkend="soup-message-add-final-chunk">soup_message_add_final_chunk</link>        (<link linkend="SoupMessage">SoupMessage</link> *msg);
<link linkend="SoupDataBuffer">SoupDataBuffer</link>*     <link linkend="soup-message-pop-chunk">soup_message_pop_chunk</link>              (<link linkend="SoupMessage">SoupMessage</link> *msg);
<link linkend="gboolean">gboolean</link>            <link linkend="soup-message-is-keepalive">soup_message_is_keepalive</link>           (<link linkend="SoupMessage">SoupMessage</link> *msg);
<link linkend="SoupTransferEncoding">SoupTransferEncoding</link> <link linkend="soup-message-get-request-encoding">soup_message_get_request_encoding</link>  (<link linkend="SoupMessage">SoupMessage</link> *msg,
                                                         <link linkend="guint">guint</link> *content_length);
<link linkend="SoupTransferEncoding">SoupTransferEncoding</link> <link linkend="soup-message-get-response-encoding">soup_message_get_response_encoding</link> (<link linkend="SoupMessage">SoupMessage</link> *msg,
                                                         <link linkend="guint">guint</link> *content_length);

enum                <link linkend="SoupHandlerPhase">SoupHandlerPhase</link>;
<link linkend="void">void</link>                <link linkend="soup-message-add-handler">soup_message_add_handler</link>            (<link linkend="SoupMessage">SoupMessage</link> *msg,
                                                         <link linkend="SoupHandlerPhase">SoupHandlerPhase</link> phase,
                                                         <link linkend="SoupMessageCallbackFn">SoupMessageCallbackFn</link> handler_cb,
                                                         <link linkend="gpointer">gpointer</link> user_data);
<link linkend="void">void</link>                <link linkend="soup-message-add-header-handler">soup_message_add_header_handler</link>     (<link linkend="SoupMessage">SoupMessage</link> *msg,
                                                         const <link linkend="char">char</link> *header,
                                                         <link linkend="SoupHandlerPhase">SoupHandlerPhase</link> phase,
                                                         <link linkend="SoupMessageCallbackFn">SoupMessageCallbackFn</link> handler_cb,
                                                         <link linkend="gpointer">gpointer</link> user_data);
<link linkend="void">void</link>                <link linkend="soup-message-add-status-code-handler">soup_message_add_status_code_handler</link>
                                                        (<link linkend="SoupMessage">SoupMessage</link> *msg,
                                                         <link linkend="guint">guint</link> status_code,
                                                         <link linkend="SoupHandlerPhase">SoupHandlerPhase</link> phase,
                                                         <link linkend="SoupMessageCallbackFn">SoupMessageCallbackFn</link> handler_cb,
                                                         <link linkend="gpointer">gpointer</link> user_data);
<link linkend="void">void</link>                <link linkend="soup-message-add-status-class-handler">soup_message_add_status_class_handler</link>
                                                        (<link linkend="SoupMessage">SoupMessage</link> *msg,
                                                         <link linkend="SoupStatusClass">SoupStatusClass</link> status_class,
                                                         <link linkend="SoupHandlerPhase">SoupHandlerPhase</link> phase,
                                                         <link linkend="SoupMessageCallbackFn">SoupMessageCallbackFn</link> handler_cb,
                                                         <link linkend="gpointer">gpointer</link> user_data);
<link linkend="void">void</link>                <link linkend="soup-message-remove-handler">soup_message_remove_handler</link>         (<link linkend="SoupMessage">SoupMessage</link> *msg,
                                                         <link linkend="SoupHandlerPhase">SoupHandlerPhase</link> phase,
                                                         <link linkend="SoupMessageCallbackFn">SoupMessageCallbackFn</link> handler_cb,
                                                         <link linkend="gpointer">gpointer</link> user_data);

<link linkend="void">void</link>                <link linkend="soup-message-send-request">soup_message_send_request</link>           (<link linkend="SoupMessage">SoupMessage</link> *req,
                                                         <link linkend="SoupSocket">SoupSocket</link> *sock,
                                                         <link linkend="gboolean">gboolean</link> is_via_proxy);
<link linkend="void">void</link>                <link linkend="soup-message-read-request">soup_message_read_request</link>           (<link linkend="SoupMessage">SoupMessage</link> *req,
                                                         <link linkend="SoupSocket">SoupSocket</link> *sock);
<link linkend="void">void</link>                <link linkend="soup-message-io-pause">soup_message_io_pause</link>               (<link linkend="SoupMessage">SoupMessage</link> *msg);
<link linkend="void">void</link>                <link linkend="soup-message-io-unpause">soup_message_io_unpause</link>             (<link linkend="SoupMessage">SoupMessage</link> *msg);
<link linkend="void">void</link>                <link linkend="soup-message-io-stop">soup_message_io_stop</link>                (<link linkend="SoupMessage">SoupMessage</link> *msg);


</synopsis>
</refsynopsisdiv>

<refsect1 role="object_hierarchy">
<title role="object_hierarchy.title">Object Hierarchy</title>
<synopsis>

  <link linkend="GObject">GObject</link>
   +----SoupMessage
         +----<link linkend="SoupServerMessage">SoupServerMessage</link>
         +----<link linkend="SoupSoapMessage">SoupSoapMessage</link>
         +----<link linkend="SoupXmlrpcMessage">SoupXmlrpcMessage</link>
</synopsis>

</refsect1>






<refsect1 role="signal_proto">
<title role="signal_proto.title">Signals</title>
<synopsis>

  &quot;<link linkend="SoupMessage-finished">finished</link>&quot;                                       : Run First
  &quot;<link linkend="SoupMessage-got-body">got-body</link>&quot;                                       : Run First
  &quot;<link linkend="SoupMessage-got-chunk">got-chunk</link>&quot;                                      : Run First
  &quot;<link linkend="SoupMessage-got-headers">got-headers</link>&quot;                                    : Run First
  &quot;<link linkend="SoupMessage-got-informational">got-informational</link>&quot;                              : Run First
  &quot;<link linkend="SoupMessage-restarted">restarted</link>&quot;                                      : Run First
  &quot;<link linkend="SoupMessage-wrote-body">wrote-body</link>&quot;                                     : Run First
  &quot;<link linkend="SoupMessage-wrote-chunk">wrote-chunk</link>&quot;                                    : Run First
  &quot;<link linkend="SoupMessage-wrote-headers">wrote-headers</link>&quot;                                  : Run First
  &quot;<link linkend="SoupMessage-wrote-informational">wrote-informational</link>&quot;                            : Run First
</synopsis>
</refsect1>


<refsect1 role="desc">
<title role="desc.title">Description</title>
<para>

</para>
</refsect1>

<refsect1 role="details">
<title role="details.title">Details</title>
<refsect2>
<title><anchor id="SoupMessage-struct" role="struct"/>struct SoupMessage</title>
<indexterm><primary>SoupMessage</primary></indexterm><programlisting>struct SoupMessage {
	const char         *method;

	guint               status_code;
	const char         *reason_phrase;

	SoupDataBuffer      request;
	GHashTable         *request_headers;

	SoupDataBuffer      response;
	GHashTable         *response_headers;

	SoupMessageStatus   status;
};
</programlisting>
<para>
Represents an HTTP message being sent or received.</para>
<para>

</para><variablelist role="struct">
<varlistentry>
<term>const&nbsp;<link linkend="char">char</link>&nbsp;*<structfield>method</structfield>;</term>
<listitem><simpara> the HTTP method
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="guint">guint</link>&nbsp;<structfield>status_code</structfield>;</term>
<listitem><simpara> the HTTP status code
</simpara></listitem>
</varlistentry>
<varlistentry>
<term>const&nbsp;<link linkend="char">char</link>&nbsp;*<structfield>reason_phrase</structfield>;</term>
<listitem><simpara> the status phrase associated with <parameter>status_code</parameter>
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="SoupDataBuffer">SoupDataBuffer</link>&nbsp;<structfield>request</structfield>;</term>
<listitem><simpara> the request buffer
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="GHashTable">GHashTable</link>&nbsp;*<structfield>request_headers</structfield>;</term>
<listitem><simpara> the request headers
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="SoupDataBuffer">SoupDataBuffer</link>&nbsp;<structfield>response</structfield>;</term>
<listitem><simpara> the response buffer
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="GHashTable">GHashTable</link>&nbsp;*<structfield>response_headers</structfield>;</term>
<listitem><simpara> the response headers
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="SoupMessageStatus">SoupMessageStatus</link>&nbsp;<structfield>status</structfield>;</term>
<listitem><simpara> the processing status of the message
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="SoupMessageStatus" role="enum"/>enum SoupMessageStatus</title>
<indexterm><primary>SoupMessageStatus</primary></indexterm><programlisting>typedef enum {
	SOUP_MESSAGE_STATUS_IDLE,
	SOUP_MESSAGE_STATUS_QUEUED,
        SOUP_MESSAGE_STATUS_CONNECTING,
        SOUP_MESSAGE_STATUS_RUNNING,
	SOUP_MESSAGE_STATUS_FINISHED
} SoupMessageStatus;
</programlisting>
<para>
Enum indicating the lifecycle of a <link linkend="SoupMessage"><type>SoupMessage</type></link>.</para>
<para>

</para><variablelist role="enum">
<varlistentry>
<term><anchor id="SOUP-MESSAGE-STATUS-IDLE:CAPS" role="constant"/><literal>SOUP_MESSAGE_STATUS_IDLE</literal></term>
<listitem><simpara> The message has not yet been queued.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="SOUP-MESSAGE-STATUS-QUEUED:CAPS" role="constant"/><literal>SOUP_MESSAGE_STATUS_QUEUED</literal></term>
<listitem><simpara> The message has been queued, but is
waiting for a connection to be available.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="SOUP-MESSAGE-STATUS-CONNECTING:CAPS" role="constant"/><literal>SOUP_MESSAGE_STATUS_CONNECTING</literal></term>
<listitem><simpara> The message is waiting for a
specific connection to finish connecting.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="SOUP-MESSAGE-STATUS-RUNNING:CAPS" role="constant"/><literal>SOUP_MESSAGE_STATUS_RUNNING</literal></term>
<listitem><simpara> The message is being processed.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="SOUP-MESSAGE-STATUS-FINISHED:CAPS" role="constant"/><literal>SOUP_MESSAGE_STATUS_FINISHED</literal></term>
<listitem><simpara> The message is complete (request and
response both processed).
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="SOUP-MESSAGE-IS-STARTING:CAPS" role="macro"/>SOUP_MESSAGE_IS_STARTING()</title>
<indexterm><primary>SOUP_MESSAGE_IS_STARTING</primary></indexterm><programlisting>#define SOUP_MESSAGE_IS_STARTING(msg) (msg-&gt;status == SOUP_MESSAGE_STATUS_QUEUED || msg-&gt;status == SOUP_MESSAGE_STATUS_CONNECTING)
</programlisting>
<para>
Tests if <parameter>msg</parameter> is in a "starting" state, waiting to be sent. (More
commonly used to test if a message has been requeued after its
first attempt.)</para>

<para>

</para><variablelist role="params">
<varlistentry><term><parameter>msg</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="SoupMessage"><type>SoupMessage</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if <parameter>msg</parameter> is waiting to be sent.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="SoupTransferEncoding" role="enum"/>enum SoupTransferEncoding</title>
<indexterm><primary>SoupTransferEncoding</primary></indexterm><programlisting>typedef enum {
	SOUP_TRANSFER_UNKNOWN = 0,
	SOUP_TRANSFER_CHUNKED,
	SOUP_TRANSFER_CONTENT_LENGTH,
	SOUP_TRANSFER_BYTERANGES,
	SOUP_TRANSFER_NONE,
	SOUP_TRANSFER_EOF
} SoupTransferEncoding;
</programlisting>
<para>
How the length of a request or response is to be encoded.</para>
<para>

</para><variablelist role="enum">
<varlistentry>
<term><anchor id="SOUP-TRANSFER-UNKNOWN:CAPS" role="constant"/><literal>SOUP_TRANSFER_UNKNOWN</literal></term>
<listitem><simpara> unknown / error
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="SOUP-TRANSFER-CHUNKED:CAPS" role="constant"/><literal>SOUP_TRANSFER_CHUNKED</literal></term>
<listitem><simpara> chunked encoding (currently only supported
for response)
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="SOUP-TRANSFER-CONTENT-LENGTH:CAPS" role="constant"/><literal>SOUP_TRANSFER_CONTENT_LENGTH</literal></term>
<listitem><simpara> Content-Length encoding
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="SOUP-TRANSFER-BYTERANGES:CAPS" role="constant"/><literal>SOUP_TRANSFER_BYTERANGES</literal></term>
<listitem><simpara> multipart/byteranges (Reserved for future
use: NOT CURRENTLY IMPLEMENTED)
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="SOUP-TRANSFER-NONE:CAPS" role="constant"/><literal>SOUP_TRANSFER_NONE</literal></term>
<listitem><simpara> no body is present (which is not the same as a
0-length body, and only occurs in certain places)
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="SOUP-TRANSFER-EOF:CAPS" role="constant"/><literal>SOUP_TRANSFER_EOF</literal></term>
<listitem><simpara> Response body ends when the connection is closed
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="SoupOwnership" role="enum"/>enum SoupOwnership</title>
<indexterm><primary>SoupOwnership</primary></indexterm><programlisting>typedef enum {
	SOUP_BUFFER_SYSTEM_OWNED = 0,
	SOUP_BUFFER_USER_OWNED,
	SOUP_BUFFER_STATIC
} SoupOwnership;
</programlisting>
<para>
Used by <link linkend="SoupDataBuffer"><type>SoupDataBuffer</type></link> (and several functions) to indicate the
ownership of a buffer.</para>
<para>

</para><variablelist role="enum">
<varlistentry>
<term><anchor id="SOUP-BUFFER-SYSTEM-OWNED:CAPS" role="constant"/><literal>SOUP_BUFFER_SYSTEM_OWNED</literal></term>
<listitem><simpara> The data is owned by soup and it can
free it when it is done with it.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="SOUP-BUFFER-USER-OWNED:CAPS" role="constant"/><literal>SOUP_BUFFER_USER_OWNED</literal></term>
<listitem><simpara> The data is owned by the user, who is
responsible for freeing it at the right point
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="SOUP-BUFFER-STATIC:CAPS" role="constant"/><literal>SOUP_BUFFER_STATIC</literal></term>
<listitem><simpara> The data should not be freed.
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="SoupDataBuffer" role="struct"/>SoupDataBuffer</title>
<indexterm><primary>SoupDataBuffer</primary></indexterm><programlisting>typedef struct {
	SoupOwnership  owner;
	char          *body;
	guint          length;
} SoupDataBuffer;
</programlisting>
<para>
A data buffer used in several places.</para>
<para>

</para><variablelist role="struct">
<varlistentry>
<term><link linkend="SoupOwnership">SoupOwnership</link>&nbsp;<structfield>owner</structfield>;</term>
<listitem><simpara> the ownership of the data
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="char">char</link>&nbsp;*<structfield>body</structfield>;</term>
<listitem><simpara> the data itself
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="guint">guint</link>&nbsp;<structfield>length</structfield>;</term>
<listitem><simpara> length of <parameter>body</parameter>
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="SoupMessageCallbackFn" role="function"/>SoupMessageCallbackFn ()</title>
<indexterm><primary>SoupMessageCallbackFn</primary></indexterm><programlisting><link linkend="void">void</link>                (*SoupMessageCallbackFn)            (<link linkend="SoupMessage">SoupMessage</link> *req,
                                                         <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>
A callback function used by many <link linkend="SoupMessage"><type>SoupMessage</type></link> methods.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>req</parameter>&nbsp;:</term>
<listitem><simpara> the <link linkend="SoupMessage"><type>SoupMessage</type></link> in question
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara> user data
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-message-new" role="function"/>soup_message_new ()</title>
<indexterm><primary>soup_message_new</primary></indexterm><programlisting><link linkend="SoupMessage">SoupMessage</link>*        soup_message_new                    (const <link linkend="char">char</link> *method,
                                                         const <link linkend="char">char</link> *uri_string);</programlisting>
<para>
Creates a new empty <link linkend="SoupMessage"><type>SoupMessage</type></link>, which will connect to <parameter>uri</parameter></para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>method</parameter>&nbsp;:</term>
<listitem><simpara> the HTTP method for the created request
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>uri_string</parameter>&nbsp;:</term>
<listitem><simpara> the destination endpoint (as a string)
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the new <link linkend="SoupMessage"><type>SoupMessage</type></link> (or <link linkend="NULL:CAPS"><literal>NULL</literal></link> if <parameter>uri</parameter> could not
be parsed).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-message-new-from-uri" role="function"/>soup_message_new_from_uri ()</title>
<indexterm><primary>soup_message_new_from_uri</primary></indexterm><programlisting><link linkend="SoupMessage">SoupMessage</link>*        soup_message_new_from_uri           (const <link linkend="char">char</link> *method,
                                                         const <link linkend="SoupUri">SoupUri</link> *uri);</programlisting>
<para>
Creates a new empty <link linkend="SoupMessage"><type>SoupMessage</type></link>, which will connect to <parameter>uri</parameter></para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>method</parameter>&nbsp;:</term>
<listitem><simpara> the HTTP method for the created request
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>uri</parameter>&nbsp;:</term>
<listitem><simpara> the destination endpoint (as a <link linkend="SoupUri"><type>SoupUri</type></link>)
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the new <link linkend="SoupMessage"><type>SoupMessage</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-message-set-request" role="function"/>soup_message_set_request ()</title>
<indexterm><primary>soup_message_set_request</primary></indexterm><programlisting><link linkend="void">void</link>                soup_message_set_request            (<link linkend="SoupMessage">SoupMessage</link> *msg,
                                                         const <link linkend="char">char</link> *content_type,
                                                         <link linkend="SoupOwnership">SoupOwnership</link> req_owner,
                                                         <link linkend="char">char</link> *req_body,
                                                         <link linkend="gulong">gulong</link> req_length);</programlisting>
<para>
Convenience function to set the request body of a <link linkend="SoupMessage"><type>SoupMessage</type></link></para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>msg</parameter>&nbsp;:</term>
<listitem><simpara> the message
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>content_type</parameter>&nbsp;:</term>
<listitem><simpara> MIME Content-Type of the body
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>req_owner</parameter>&nbsp;:</term>
<listitem><simpara> the <link linkend="SoupOwnership"><type>SoupOwnership</type></link> of the passed data buffer.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>req_body</parameter>&nbsp;:</term>
<listitem><simpara> a data buffer containing the body of the message request.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>req_length</parameter>&nbsp;:</term>
<listitem><simpara> the byte length of <parameter>req_body</parameter>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-message-set-response" role="function"/>soup_message_set_response ()</title>
<indexterm><primary>soup_message_set_response</primary></indexterm><programlisting><link linkend="void">void</link>                soup_message_set_response           (<link linkend="SoupMessage">SoupMessage</link> *msg,
                                                         const <link linkend="char">char</link> *content_type,
                                                         <link linkend="SoupOwnership">SoupOwnership</link> resp_owner,
                                                         <link linkend="char">char</link> *resp_body,
                                                         <link linkend="gulong">gulong</link> resp_length);</programlisting>
<para>
Convenience function to set the response body of a <link linkend="SoupMessage"><type>SoupMessage</type></link></para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>msg</parameter>&nbsp;:</term>
<listitem><simpara> the message
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>content_type</parameter>&nbsp;:</term>
<listitem><simpara> MIME Content-Type of the body
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>resp_owner</parameter>&nbsp;:</term>
<listitem><simpara> the <link linkend="SoupOwnership"><type>SoupOwnership</type></link> of the passed data buffer.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>resp_body</parameter>&nbsp;:</term>
<listitem><simpara> a data buffer containing the body of the message response.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>resp_length</parameter>&nbsp;:</term>
<listitem><simpara> the byte length of <parameter>resp_body</parameter>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-message-add-header" role="function"/>soup_message_add_header ()</title>
<indexterm><primary>soup_message_add_header</primary></indexterm><programlisting><link linkend="void">void</link>                soup_message_add_header             (<link linkend="GHashTable">GHashTable</link> *hash,
                                                         const <link linkend="char">char</link> *name,
                                                         const <link linkend="char">char</link> *value);</programlisting>
<para>
Adds a header with name <parameter>name</parameter> and value <parameter>value</parameter> to <parameter>hash</parameter>. If there
was already a header with name <parameter>name</parameter>, this one does not replace it,
it is merely added to it.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>hash</parameter>&nbsp;:</term>
<listitem><simpara> a header table (the <link linkend="request-headers"><literal>request_headers</literal></link> or <link linkend="response-headers"><literal>response_headers</literal></link>
field of a <link linkend="SoupMessage"><type>SoupMessage</type></link>)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>name</parameter>&nbsp;:</term>
<listitem><simpara> the header name to add
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>value</parameter>&nbsp;:</term>
<listitem><simpara> the value of the new header
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-message-get-header" role="function"/>soup_message_get_header ()</title>
<indexterm><primary>soup_message_get_header</primary></indexterm><programlisting>const <link linkend="char">char</link>*         soup_message_get_header             (<link linkend="GHashTable">GHashTable</link> *hash,
                                                         const <link linkend="char">char</link> *name);</programlisting>
<para>
Finds the first header in <parameter>hash</parameter> with name <parameter>name</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>hash</parameter>&nbsp;:</term>
<listitem><simpara> a header table (the <link linkend="request-headers"><literal>request_headers</literal></link> or <link linkend="response-headers"><literal>response_headers</literal></link>
field of a <link linkend="SoupMessage"><type>SoupMessage</type></link>)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>name</parameter>&nbsp;:</term>
<listitem><simpara> header name.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the header's value or <link linkend="NULL:CAPS"><literal>NULL</literal></link> if not found.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-message-get-header-list" role="function"/>soup_message_get_header_list ()</title>
<indexterm><primary>soup_message_get_header_list</primary></indexterm><programlisting>const <link linkend="GSList">GSList</link>*       soup_message_get_header_list        (<link linkend="GHashTable">GHashTable</link> *hash,
                                                         const <link linkend="char">char</link> *name);</programlisting>
<para>
Finds all headers in <parameter>hash</parameter> with name <parameter>name</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>hash</parameter>&nbsp;:</term>
<listitem><simpara> a header table (the <link linkend="request-headers"><literal>request_headers</literal></link> or <link linkend="response-headers"><literal>response_headers</literal></link>
field of a <link linkend="SoupMessage"><type>SoupMessage</type></link>)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>name</parameter>&nbsp;:</term>
<listitem><simpara> header name.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a (possibly empty) list of values of headers with
name <parameter>name</parameter>. The caller should not modify or free this list.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-message-foreach-header" role="function"/>soup_message_foreach_header ()</title>
<indexterm><primary>soup_message_foreach_header</primary></indexterm><programlisting><link linkend="void">void</link>                soup_message_foreach_header         (<link linkend="GHashTable">GHashTable</link> *hash,
                                                         <link linkend="GHFunc">GHFunc</link> func,
                                                         <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>
Calls <parameter>func</parameter> once for each header value in <parameter>hash</parameter>. (If there are
headers will multiple values, <parameter>func</parameter> will be called once on each
value.)</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>hash</parameter>&nbsp;:</term>
<listitem><simpara> a header table (the <link linkend="request-headers"><literal>request_headers</literal></link> or <link linkend="response-headers"><literal>response_headers</literal></link>
field of a <link linkend="SoupMessage"><type>SoupMessage</type></link>)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>func</parameter>&nbsp;:</term>
<listitem><simpara> callback function to run for each header
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara> data to pass to <parameter>func</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-message-remove-header" role="function"/>soup_message_remove_header ()</title>
<indexterm><primary>soup_message_remove_header</primary></indexterm><programlisting><link linkend="void">void</link>                soup_message_remove_header          (<link linkend="GHashTable">GHashTable</link> *hash,
                                                         const <link linkend="char">char</link> *name);</programlisting>
<para>
Removes <parameter>name</parameter> from <parameter>hash</parameter>. If there are multiple values for <parameter>name</parameter>,
they are all removed.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>hash</parameter>&nbsp;:</term>
<listitem><simpara> a header table (the <link linkend="request-headers"><literal>request_headers</literal></link> or <link linkend="response-headers"><literal>response_headers</literal></link>
field of a <link linkend="SoupMessage"><type>SoupMessage</type></link>)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>name</parameter>&nbsp;:</term>
<listitem><simpara> the header name to remove
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-message-clear-headers" role="function"/>soup_message_clear_headers ()</title>
<indexterm><primary>soup_message_clear_headers</primary></indexterm><programlisting><link linkend="void">void</link>                soup_message_clear_headers          (<link linkend="GHashTable">GHashTable</link> *hash);</programlisting>
<para>
Clears <parameter>hash</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>hash</parameter>&nbsp;:</term>
<listitem><simpara> a header table (the <link linkend="request-headers"><literal>request_headers</literal></link> or <link linkend="response-headers"><literal>response_headers</literal></link>
field of a <link linkend="SoupMessage"><type>SoupMessage</type></link>)
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="SoupHttpVersion" role="enum"/>enum SoupHttpVersion</title>
<indexterm><primary>SoupHttpVersion</primary></indexterm><programlisting>typedef enum {
	SOUP_HTTP_1_0 = 0,
	SOUP_HTTP_1_1 = 1
} SoupHttpVersion;
</programlisting>
<para>
Indicates the HTTP protocol version being used.</para>
<para>

</para><variablelist role="enum">
<varlistentry>
<term><anchor id="SOUP-HTTP-1-0:CAPS" role="constant"/><literal>SOUP_HTTP_1_0</literal></term>
<listitem><simpara> HTTP 1.0 (RFC 1945)
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="SOUP-HTTP-1-1:CAPS" role="constant"/><literal>SOUP_HTTP_1_1</literal></term>
<listitem><simpara> HTTP 1.1 (RFC 2616)
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-message-set-http-version" role="function"/>soup_message_set_http_version ()</title>
<indexterm><primary>soup_message_set_http_version</primary></indexterm><programlisting><link linkend="void">void</link>                soup_message_set_http_version       (<link linkend="SoupMessage">SoupMessage</link> *msg,
                                                         <link linkend="SoupHttpVersion">SoupHttpVersion</link> version);</programlisting>
<para>
Sets the HTTP version on <parameter>msg</parameter>. The default version is
<link linkend="SOUP-HTTP-1-1:CAPS"><literal>SOUP_HTTP_1_1</literal></link>. Setting it to <link linkend="SOUP-HTTP-1-0:CAPS"><literal>SOUP_HTTP_1_0</literal></link> will prevent certain
functionality from being used.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>msg</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="SoupMessage"><type>SoupMessage</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>version</parameter>&nbsp;:</term>
<listitem><simpara> the HTTP version
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-message-get-http-version" role="function"/>soup_message_get_http_version ()</title>
<indexterm><primary>soup_message_get_http_version</primary></indexterm><programlisting><link linkend="SoupHttpVersion">SoupHttpVersion</link>     soup_message_get_http_version       (<link linkend="SoupMessage">SoupMessage</link> *msg);</programlisting>
<para>
Gets the HTTP version of <parameter>msg</parameter>. This is the minimum of the
version from the request and the version from the response.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>msg</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="SoupMessage"><type>SoupMessage</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the HTTP version
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-message-get-uri" role="function"/>soup_message_get_uri ()</title>
<indexterm><primary>soup_message_get_uri</primary></indexterm><programlisting>const <link linkend="SoupUri">SoupUri</link>*      soup_message_get_uri                (<link linkend="SoupMessage">SoupMessage</link> *msg);</programlisting>
<para>
Gets <parameter>msg</parameter>'s URI</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>msg</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="SoupMessage"><type>SoupMessage</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the URI <parameter>msg</parameter> is targeted for.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-message-set-uri" role="function"/>soup_message_set_uri ()</title>
<indexterm><primary>soup_message_set_uri</primary></indexterm><programlisting><link linkend="void">void</link>                soup_message_set_uri                (<link linkend="SoupMessage">SoupMessage</link> *msg,
                                                         const <link linkend="SoupUri">SoupUri</link> *uri);</programlisting>
<para>
Sets <parameter>msg</parameter>'s URI to <parameter>uri</parameter>. If <parameter>msg</parameter> has already been sent and you want
to re-send it with the new URI, you need to call
<link linkend="soup-session-requeue-message"><function>soup_session_requeue_message()</function></link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>msg</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="SoupMessage"><type>SoupMessage</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>uri</parameter>&nbsp;:</term>
<listitem><simpara> the new <link linkend="SoupUri"><type>SoupUri</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="SoupMessageFlags" role="enum"/>enum SoupMessageFlags</title>
<indexterm><primary>SoupMessageFlags</primary></indexterm><programlisting>typedef enum {
	SOUP_MESSAGE_NO_REDIRECT      = (1 &lt;&lt; 1),
	SOUP_MESSAGE_OVERWRITE_CHUNKS = (1 &lt;&lt; 3),
	SOUP_MESSAGE_EXPECT_CONTINUE  = (1 &lt;&lt; 4)
} SoupMessageFlags;
</programlisting>
<para>
Various flags that can be set on a <link linkend="SoupMessage"><type>SoupMessage</type></link> to alter its
behavior.</para>
<para>

</para><variablelist role="enum">
<varlistentry>
<term><anchor id="SOUP-MESSAGE-NO-REDIRECT:CAPS" role="constant"/><literal>SOUP_MESSAGE_NO_REDIRECT</literal></term>
<listitem><simpara> The session should not follow redirect
(3xx) responses received by this message.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="SOUP-MESSAGE-OVERWRITE-CHUNKS:CAPS" role="constant"/><literal>SOUP_MESSAGE_OVERWRITE_CHUNKS</literal></term>
<listitem><simpara> Rather than building up the
response body in <link linkend="response"><literal>response</literal></link>, each new chunk should overwrite the
previous one. (This can be used if you are connecting to the
<link linkend="got-chunk"><literal>got_chunk</literal></link> signal or have installed a <link linkend="SOUP-MESSAGE-BODY-CHUNK:CAPS"><literal>SOUP_MESSAGE_BODY_CHUNK</literal></link>
handler.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="SOUP-MESSAGE-EXPECT-CONTINUE:CAPS" role="constant"/><literal>SOUP_MESSAGE_EXPECT_CONTINUE</literal></term>
<listitem><simpara> This will cause an "Expect:
100-continue" header to be added to the outgoing request, giving
the server the opportunity to reject the message (eg, with a 401
Unauthorized) before the full request body is sent.
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-message-set-flags" role="function"/>soup_message_set_flags ()</title>
<indexterm><primary>soup_message_set_flags</primary></indexterm><programlisting><link linkend="void">void</link>                soup_message_set_flags              (<link linkend="SoupMessage">SoupMessage</link> *msg,
                                                         <link linkend="guint">guint</link> flags);</programlisting>
<para>
Sets the specified flags on <parameter>msg</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>msg</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="SoupMessage"><type>SoupMessage</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>flags</parameter>&nbsp;:</term>
<listitem><simpara> a set of <link linkend="SoupMessageFlags"><type>SoupMessageFlags</type></link> values
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-message-get-flags" role="function"/>soup_message_get_flags ()</title>
<indexterm><primary>soup_message_get_flags</primary></indexterm><programlisting><link linkend="guint">guint</link>               soup_message_get_flags              (<link linkend="SoupMessage">SoupMessage</link> *msg);</programlisting>
<para>
Gets the flags on <parameter>msg</parameter></para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>msg</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="SoupMessage"><type>SoupMessage</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the flags
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-message-set-status" role="function"/>soup_message_set_status ()</title>
<indexterm><primary>soup_message_set_status</primary></indexterm><programlisting><link linkend="void">void</link>                soup_message_set_status             (<link linkend="SoupMessage">SoupMessage</link> *msg,
                                                         <link linkend="guint">guint</link> status_code);</programlisting>
<para>
Sets <parameter>msg</parameter>'s status code to <parameter>status_code</parameter>. If <parameter>status_code</parameter> is a
known value, it will also set <parameter>msg</parameter>'s reason_phrase.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>msg</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="SoupMessage"><type>SoupMessage</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>status_code</parameter>&nbsp;:</term>
<listitem><simpara> an HTTP status code
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-message-set-status-full" role="function"/>soup_message_set_status_full ()</title>
<indexterm><primary>soup_message_set_status_full</primary></indexterm><programlisting><link linkend="void">void</link>                soup_message_set_status_full        (<link linkend="SoupMessage">SoupMessage</link> *msg,
                                                         <link linkend="guint">guint</link> status_code,
                                                         const <link linkend="char">char</link> *reason_phrase);</programlisting>
<para>
Sets <parameter>msg</parameter>'s status code and reason phrase.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>msg</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="SoupMessage"><type>SoupMessage</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>status_code</parameter>&nbsp;:</term>
<listitem><simpara> an HTTP status code
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>reason_phrase</parameter>&nbsp;:</term>
<listitem><simpara> a description of the status
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-message-add-chunk" role="function"/>soup_message_add_chunk ()</title>
<indexterm><primary>soup_message_add_chunk</primary></indexterm><programlisting><link linkend="void">void</link>                soup_message_add_chunk              (<link linkend="SoupMessage">SoupMessage</link> *msg,
                                                         <link linkend="SoupOwnership">SoupOwnership</link> owner,
                                                         const <link linkend="char">char</link> *body,
                                                         <link linkend="guint">guint</link> length);</programlisting>
<para>
Adds a chunk of response data to <parameter>body</parameter>. (Note that currently
there is no way to send a request using chunked encoding.)</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>msg</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="SoupMessage"><type>SoupMessage</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>owner</parameter>&nbsp;:</term>
<listitem><simpara> the ownership of <parameter>body</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>body</parameter>&nbsp;:</term>
<listitem><simpara> body data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>length</parameter>&nbsp;:</term>
<listitem><simpara> length of <parameter>body</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-message-add-final-chunk" role="function"/>soup_message_add_final_chunk ()</title>
<indexterm><primary>soup_message_add_final_chunk</primary></indexterm><programlisting><link linkend="void">void</link>                soup_message_add_final_chunk        (<link linkend="SoupMessage">SoupMessage</link> *msg);</programlisting>
<para>
Adds a final, empty chunk of response data to <parameter>body</parameter>. This must
be called after adding the last real chunk, to indicate that
there is no more data.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>msg</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="SoupMessage"><type>SoupMessage</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-message-pop-chunk" role="function"/>soup_message_pop_chunk ()</title>
<indexterm><primary>soup_message_pop_chunk</primary></indexterm><programlisting><link linkend="SoupDataBuffer">SoupDataBuffer</link>*     soup_message_pop_chunk              (<link linkend="SoupMessage">SoupMessage</link> *msg);</programlisting>
<para>
Pops a chunk of response data from <parameter>msg</parameter>'s chunk list. The caller
must free <parameter>chunk</parameter> itself, and must handle the data in <parameter>chunk</parameter>
according to its <link linkend="ownership"><literal>ownership</literal></link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>msg</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="SoupMessage"><type>SoupMessage</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the chunk, or <link linkend="NULL:CAPS"><literal>NULL</literal></link> if there are no chunks left.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-message-is-keepalive" role="function"/>soup_message_is_keepalive ()</title>
<indexterm><primary>soup_message_is_keepalive</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            soup_message_is_keepalive           (<link linkend="SoupMessage">SoupMessage</link> *msg);</programlisting>
<para>
Determines whether or not <parameter>msg</parameter>'s connection can be kept alive for
further requests after processing <parameter>msg</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>msg</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="SoupMessage"><type>SoupMessage</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> or <link linkend="FALSE:CAPS"><literal>FALSE</literal></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-message-get-request-encoding" role="function"/>soup_message_get_request_encoding ()</title>
<indexterm><primary>soup_message_get_request_encoding</primary></indexterm><programlisting><link linkend="SoupTransferEncoding">SoupTransferEncoding</link> soup_message_get_request_encoding  (<link linkend="SoupMessage">SoupMessage</link> *msg,
                                                         <link linkend="guint">guint</link> *content_length);</programlisting>
<para>
Gets <parameter>msg</parameter>'s request encoding. For an outgoing (client) request,
this is only valid after the message has been fully set up (from
the library's perspective, that means not until the message has
been queued). For an incoming (server) request, this is valid after
the request headers have been read and <parameter>msg->request_headers</parameter> filled
in.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>msg</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="SoupMessage"><type>SoupMessage</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>content_length</parameter>&nbsp;:</term>
<listitem><simpara> a pointer to store the Content-Length in (or
<link linkend="NULL:CAPS"><literal>NULL</literal></link>).
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the request encoding (which cannot be
<link linkend="SOUP-TRANSFER-UNKNOWN:CAPS"><literal>SOUP_TRANSFER_UNKNOWN</literal></link> or <link linkend="SOUP-TRANSFER-EOF:CAPS"><literal>SOUP_TRANSFER_EOF</literal></link>). If it is
<link linkend="SOUP-TRANSFER-CONTENT-LENGTH:CAPS"><literal>SOUP_TRANSFER_CONTENT_LENGTH</literal></link>, *<parameter>content_length</parameter> will be set to the
request body's length.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-message-get-response-encoding" role="function"/>soup_message_get_response_encoding ()</title>
<indexterm><primary>soup_message_get_response_encoding</primary></indexterm><programlisting><link linkend="SoupTransferEncoding">SoupTransferEncoding</link> soup_message_get_response_encoding (<link linkend="SoupMessage">SoupMessage</link> *msg,
                                                         <link linkend="guint">guint</link> *content_length);</programlisting>
<para>
Gets <parameter>msg</parameter>'s response encoding. For an outgoing (client) request,
this is only valid after the response headers have been read and
<parameter>msg->response_headers</parameter> filled in. For an incoming (server) request,
this is valid after the server handler has run.
</para>
<para>
Note that the returned value is the encoding actually used on the
wire; this will not agree with the response headers in some cases
(eg, a HEAD response may have a Content-Length header, but will
still be considered <link linkend="SOUP-TRANSFER-NONE:CAPS"><literal>SOUP_TRANSFER_NONE</literal></link> by this function).</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>msg</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="SoupMessage"><type>SoupMessage</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>content_length</parameter>&nbsp;:</term>
<listitem><simpara> a pointer to store the Content-Length in (or
<link linkend="NULL:CAPS"><literal>NULL</literal></link>).
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the response encoding (which will not be
<link linkend="SOUP-TRANSFER-UNKNOWN:CAPS"><literal>SOUP_TRANSFER_UNKNOWN</literal></link>). If it is <link linkend="SOUP-TRANSFER-CONTENT-LENGTH:CAPS"><literal>SOUP_TRANSFER_CONTENT_LENGTH</literal></link>,
*<parameter>content_length</parameter> will be set to the response body's length.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="SoupHandlerPhase" role="enum"/>enum SoupHandlerPhase</title>
<indexterm><primary>SoupHandlerPhase</primary></indexterm><programlisting>typedef enum {
	SOUP_HANDLER_POST_REQUEST = 1,
	SOUP_HANDLER_PRE_BODY,
	SOUP_HANDLER_BODY_CHUNK,
	SOUP_HANDLER_POST_BODY
} SoupHandlerPhase;
</programlisting>
<para>
Indicates when a handler added with <link linkend="soup-message-add-handler"><function>soup_message_add_handler()</function></link> or
the like will be run.</para>
<para>

</para><variablelist role="enum">
<varlistentry>
<term><anchor id="SOUP-HANDLER-POST-REQUEST:CAPS" role="constant"/><literal>SOUP_HANDLER_POST_REQUEST</literal></term>
<listitem><simpara> The handler should run immediately
after sending the request body
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="SOUP-HANDLER-PRE-BODY:CAPS" role="constant"/><literal>SOUP_HANDLER_PRE_BODY</literal></term>
<listitem><simpara> The handler should run before reading the
response body (after reading the headers).
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="SOUP-HANDLER-BODY-CHUNK:CAPS" role="constant"/><literal>SOUP_HANDLER_BODY_CHUNK</literal></term>
<listitem><simpara> The handler should run after every body
chunk is read. (See also <link linkend="SOUP-MESSAGE-OVERWRITE-CHUNKS:CAPS"><literal>SOUP_MESSAGE_OVERWRITE_CHUNKS</literal></link>.)
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="SOUP-HANDLER-POST-BODY:CAPS" role="constant"/><literal>SOUP_HANDLER_POST_BODY</literal></term>
<listitem><simpara> The handler should run after the entire
message body has been read.
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-message-add-handler" role="function"/>soup_message_add_handler ()</title>
<indexterm><primary>soup_message_add_handler</primary></indexterm><programlisting><link linkend="void">void</link>                soup_message_add_handler            (<link linkend="SoupMessage">SoupMessage</link> *msg,
                                                         <link linkend="SoupHandlerPhase">SoupHandlerPhase</link> phase,
                                                         <link linkend="SoupMessageCallbackFn">SoupMessageCallbackFn</link> handler_cb,
                                                         <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>
Adds a handler to <parameter>msg</parameter> for all messages</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>msg</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="SoupMessage"><type>SoupMessage</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>phase</parameter>&nbsp;:</term>
<listitem><simpara> processing phase to run the handler in
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>handler_cb</parameter>&nbsp;:</term>
<listitem><simpara> the handler
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara> data to pass to <parameter>handler_cb</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-message-add-header-handler" role="function"/>soup_message_add_header_handler ()</title>
<indexterm><primary>soup_message_add_header_handler</primary></indexterm><programlisting><link linkend="void">void</link>                soup_message_add_header_handler     (<link linkend="SoupMessage">SoupMessage</link> *msg,
                                                         const <link linkend="char">char</link> *header,
                                                         <link linkend="SoupHandlerPhase">SoupHandlerPhase</link> phase,
                                                         <link linkend="SoupMessageCallbackFn">SoupMessageCallbackFn</link> handler_cb,
                                                         <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>
Adds a handler to <parameter>msg</parameter> for messages containing the given response
header.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>msg</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="SoupMessage"><type>SoupMessage</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>header</parameter>&nbsp;:</term>
<listitem><simpara> HTTP response header to match against
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>phase</parameter>&nbsp;:</term>
<listitem><simpara> processing phase to run the handler in
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>handler_cb</parameter>&nbsp;:</term>
<listitem><simpara> the handler
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara> data to pass to <parameter>handler_cb</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-message-add-status-code-handler" role="function"/>soup_message_add_status_code_handler ()</title>
<indexterm><primary>soup_message_add_status_code_handler</primary></indexterm><programlisting><link linkend="void">void</link>                soup_message_add_status_code_handler
                                                        (<link linkend="SoupMessage">SoupMessage</link> *msg,
                                                         <link linkend="guint">guint</link> status_code,
                                                         <link linkend="SoupHandlerPhase">SoupHandlerPhase</link> phase,
                                                         <link linkend="SoupMessageCallbackFn">SoupMessageCallbackFn</link> handler_cb,
                                                         <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>
Adds a handler to <parameter>msg</parameter> for messages receiving the given status
code.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>msg</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="SoupMessage"><type>SoupMessage</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>status_code</parameter>&nbsp;:</term>
<listitem><simpara> HTTP status code to match against
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>phase</parameter>&nbsp;:</term>
<listitem><simpara> processing phase to run the handler in
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>handler_cb</parameter>&nbsp;:</term>
<listitem><simpara> the handler
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara> data to pass to <parameter>handler_cb</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-message-add-status-class-handler" role="function"/>soup_message_add_status_class_handler ()</title>
<indexterm><primary>soup_message_add_status_class_handler</primary></indexterm><programlisting><link linkend="void">void</link>                soup_message_add_status_class_handler
                                                        (<link linkend="SoupMessage">SoupMessage</link> *msg,
                                                         <link linkend="SoupStatusClass">SoupStatusClass</link> status_class,
                                                         <link linkend="SoupHandlerPhase">SoupHandlerPhase</link> phase,
                                                         <link linkend="SoupMessageCallbackFn">SoupMessageCallbackFn</link> handler_cb,
                                                         <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>
Adds a handler to <parameter>msg</parameter> for messages receiving a status code in
the given class.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>msg</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="SoupMessage"><type>SoupMessage</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>status_class</parameter>&nbsp;:</term>
<listitem><simpara> HTTP status code class to match against
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>phase</parameter>&nbsp;:</term>
<listitem><simpara> processing phase to run the handler in
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>handler_cb</parameter>&nbsp;:</term>
<listitem><simpara> the handler
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara> data to pass to <parameter>handler_cb</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-message-remove-handler" role="function"/>soup_message_remove_handler ()</title>
<indexterm><primary>soup_message_remove_handler</primary></indexterm><programlisting><link linkend="void">void</link>                soup_message_remove_handler         (<link linkend="SoupMessage">SoupMessage</link> *msg,
                                                         <link linkend="SoupHandlerPhase">SoupHandlerPhase</link> phase,
                                                         <link linkend="SoupMessageCallbackFn">SoupMessageCallbackFn</link> handler_cb,
                                                         <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>
Removes all matching handlers from <parameter>msg</parameter></para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>msg</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="SoupMessage"><type>SoupMessage</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>phase</parameter>&nbsp;:</term>
<listitem><simpara> processing phase to run the handler in
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>handler_cb</parameter>&nbsp;:</term>
<listitem><simpara> the handler
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara> data to pass to <parameter>handler_cb</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-message-send-request" role="function"/>soup_message_send_request ()</title>
<indexterm><primary>soup_message_send_request</primary></indexterm><programlisting><link linkend="void">void</link>                soup_message_send_request           (<link linkend="SoupMessage">SoupMessage</link> *req,
                                                         <link linkend="SoupSocket">SoupSocket</link> *sock,
                                                         <link linkend="gboolean">gboolean</link> is_via_proxy);</programlisting>
<para>
Begins the process of sending <parameter>msg</parameter> across <parameter>sock</parameter>. (If <parameter>sock</parameter> is
synchronous, then <link linkend="soup-message-send-request"><function>soup_message_send_request()</function></link> won't return until
the response has been received.)</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>req</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="SoupMessage"><type>SoupMessage</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sock</parameter>&nbsp;:</term>
<listitem><simpara> the <link linkend="SoupSocket"><type>SoupSocket</type></link> to send <parameter>req</parameter> on
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>is_via_proxy</parameter>&nbsp;:</term>
<listitem><simpara> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if <parameter>sock</parameter> is a connection to a proxy server
rather than a direct connection to the desired HTTP server
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-message-read-request" role="function"/>soup_message_read_request ()</title>
<indexterm><primary>soup_message_read_request</primary></indexterm><programlisting><link linkend="void">void</link>                soup_message_read_request           (<link linkend="SoupMessage">SoupMessage</link> *req,
                                                         <link linkend="SoupSocket">SoupSocket</link> *sock);</programlisting>
<para>
Begins the process of receiving a request from <parameter>sock</parameter> into <parameter>req</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>req</parameter>&nbsp;:</term>
<listitem><simpara> an empty <link linkend="SoupServerMessage"><type>SoupServerMessage</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sock</parameter>&nbsp;:</term>
<listitem><simpara> socket to receive the request on
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-message-io-pause" role="function"/>soup_message_io_pause ()</title>
<indexterm><primary>soup_message_io_pause</primary></indexterm><programlisting><link linkend="void">void</link>                soup_message_io_pause               (<link linkend="SoupMessage">SoupMessage</link> *msg);</programlisting>
<para>
Pauses I/O on <parameter>msg</parameter>. This can be used in a <link linkend="SoupServer"><type>SoupServer</type></link> handler when
you don't have the data ready to return yet, or with a client-side
message if you are not ready to process any more of the response at
this time; call <link linkend="soup-message-io-unpause"><function>soup_message_io_unpause()</function></link> to resume I/O.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>msg</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="SoupMessage"><type>SoupMessage</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-message-io-unpause" role="function"/>soup_message_io_unpause ()</title>
<indexterm><primary>soup_message_io_unpause</primary></indexterm><programlisting><link linkend="void">void</link>                soup_message_io_unpause             (<link linkend="SoupMessage">SoupMessage</link> *msg);</programlisting>
<para>
Resumes I/O on <parameter>msg</parameter>. Use this to resume after calling
<link linkend="soup-message-io-pause"><function>soup_message_io_pause()</function></link>, or after adding a new chunk to a chunked
response.
</para>
<para>
If <parameter>msg</parameter> is being sent via blocking I/O, this will resume reading or
writing immediately. If <parameter>msg</parameter> is using non-blocking I/O, then
reading or writing won't resume until you return to the main loop.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>msg</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="SoupMessage"><type>SoupMessage</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-message-io-stop" role="function"/>soup_message_io_stop ()</title>
<indexterm><primary>soup_message_io_stop</primary></indexterm><programlisting><link linkend="void">void</link>                soup_message_io_stop                (<link linkend="SoupMessage">SoupMessage</link> *msg);</programlisting>
<para>
Immediately stops I/O on msg; if the connection would be left in an
inconsistent state, it will be closed.
</para>
<para>
Note: this is a low-level function that does not cause any signals
to be emitted on <parameter>msg</parameter>; it is up to the caller to make sure that
<parameter>msg</parameter> doesn't get "stranded".</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>msg</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="SoupMessage"><type>SoupMessage</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>

<refsect1 role="signals">
<title role="signals.title">Signal Details</title>
<refsect2><title><anchor id="SoupMessage-finished"/>The &quot;finished&quot; signal</title>
<indexterm><primary>SoupMessage::finished</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="SoupMessage">SoupMessage</link> *msg,
                                                        <link linkend="gpointer">gpointer</link>     user_data)      : Run First</programlisting>
<para>
Emitted when all HTTP processing is finished for a message.
(After <link linkend="read-body"><type>read-body</type></link> for client-side code, or after
<link linkend="wrote-body"><type>wrote-body</type></link> for server-side code.)</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>msg</parameter>&nbsp;:</term>
<listitem><simpara> the message
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2><title><anchor id="SoupMessage-got-body"/>The &quot;got-body&quot; signal</title>
<indexterm><primary>SoupMessage::got-body</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="SoupMessage">SoupMessage</link> *msg,
                                                        <link linkend="gpointer">gpointer</link>     user_data)      : Run First</programlisting>
<para>
Emitted after receiving the complete message body.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>msg</parameter>&nbsp;:</term>
<listitem><simpara> the message
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2><title><anchor id="SoupMessage-got-chunk"/>The &quot;got-chunk&quot; signal</title>
<indexterm><primary>SoupMessage::got-chunk</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="SoupMessage">SoupMessage</link> *msg,
                                                        <link linkend="gpointer">gpointer</link>     user_data)      : Run First</programlisting>
<para>
Emitted after receiving a chunk of a message body. Note
that "chunk" in this context means any subpiece of the
body, not necessarily the specific HTTP 1.1 chunks sent by
the other side.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>msg</parameter>&nbsp;:</term>
<listitem><simpara> the message
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2><title><anchor id="SoupMessage-got-headers"/>The &quot;got-headers&quot; signal</title>
<indexterm><primary>SoupMessage::got-headers</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="SoupMessage">SoupMessage</link> *msg,
                                                        <link linkend="gpointer">gpointer</link>     user_data)      : Run First</programlisting>
<para>
Emitted after receiving all message headers for a message.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>msg</parameter>&nbsp;:</term>
<listitem><simpara> the message
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2><title><anchor id="SoupMessage-got-informational"/>The &quot;got-informational&quot; signal</title>
<indexterm><primary>SoupMessage::got-informational</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="SoupMessage">SoupMessage</link> *msg,
                                                        <link linkend="gpointer">gpointer</link>     user_data)      : Run First</programlisting>
<para>
Emitted after receiving a 1xx (Informational) response for
a message.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>msg</parameter>&nbsp;:</term>
<listitem><simpara> the message
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2><title><anchor id="SoupMessage-restarted"/>The &quot;restarted&quot; signal</title>
<indexterm><primary>SoupMessage::restarted</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="SoupMessage">SoupMessage</link> *msg,
                                                        <link linkend="gpointer">gpointer</link>     user_data)      : Run First</programlisting>
<para>
Emitted when a message is about to be re-queued.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>msg</parameter>&nbsp;:</term>
<listitem><simpara> the message
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2><title><anchor id="SoupMessage-wrote-body"/>The &quot;wrote-body&quot; signal</title>
<indexterm><primary>SoupMessage::wrote-body</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="SoupMessage">SoupMessage</link> *msg,
                                                        <link linkend="gpointer">gpointer</link>     user_data)      : Run First</programlisting>
<para>
Emitted immediately after writing the complete body for a message.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>msg</parameter>&nbsp;:</term>
<listitem><simpara> the message
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2><title><anchor id="SoupMessage-wrote-chunk"/>The &quot;wrote-chunk&quot; signal</title>
<indexterm><primary>SoupMessage::wrote-chunk</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="SoupMessage">SoupMessage</link> *msg,
                                                        <link linkend="gpointer">gpointer</link>     user_data)      : Run First</programlisting>
<para>
Emitted immediately after writing a body chunk for a message.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>msg</parameter>&nbsp;:</term>
<listitem><simpara> the message
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2><title><anchor id="SoupMessage-wrote-headers"/>The &quot;wrote-headers&quot; signal</title>
<indexterm><primary>SoupMessage::wrote-headers</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="SoupMessage">SoupMessage</link> *msg,
                                                        <link linkend="gpointer">gpointer</link>     user_data)      : Run First</programlisting>
<para>
Emitted immediately after writing the headers for a message.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>msg</parameter>&nbsp;:</term>
<listitem><simpara> the message
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2><title><anchor id="SoupMessage-wrote-informational"/>The &quot;wrote-informational&quot; signal</title>
<indexterm><primary>SoupMessage::wrote-informational</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="SoupMessage">SoupMessage</link> *msg,
                                                        <link linkend="gpointer">gpointer</link>     user_data)      : Run First</programlisting>
<para>
Emitted immediately after writing a 1xx (Informational)
response for a message.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>msg</parameter>&nbsp;:</term>
<listitem><simpara> the message
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2>
</refsect1>



</refentry>
