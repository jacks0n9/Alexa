/*
 * led_patterns.h
 *
 * Copyright (c) 2013 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * The code contained herein is licensed under the GNU General Public
 * License. You may obtain a copy of the GNU General Public License
 * Version 2 or later at the following locations:
 *
 * http://www.opensource.org/licenses/gpl-license.html
 * http://www.gnu.org/copyleft/gpl.html
 */
#ifndef __LED_PATTERNS_H__
#define __LED_PATTERNS_H__

#define LP5523_DRIVER_1_ADDR		0x34
#define LP5523_DRIVER_2_ADDR		0x33
#define LP5523_DRIVER_3_ADDR		0x35
#define LP5523_DRIVER_4_ADDR		0x32

struct pattern_info {
	u8* data;
	int size;
	u8 engine1_start;
	u8 engine2_start;
	u8 engine3_start;
	u8 address_list[];
};

// Master Sequence
u8 lp5523_master[] = {
0x00, 0x2A, 0x00, 0x20, 0x00, 0x02, 0x00, 0x08, 0x00, 0x10, 0x00, 0x01, 0x00, 0x04, 0x9C, 0x04,
0x9C, 0x86, 0x40, 0xFF, 0x4C, 0x00, 0x40, 0x00, 0x9D, 0x80, 0x40, 0xFF, 0x4C, 0x00, 0x40, 0x00,
0x9D, 0x80, 0x40, 0xFF, 0x4C, 0x00, 0x40, 0x00, 0x9D, 0x80, 0xE0, 0x40, 0xE0, 0x08, 0xE2, 0x00,
0x00, 0x00, 0x9C, 0x00, 0x9C, 0x83, 0x40, 0xFF, 0x4C, 0x00, 0x40, 0xFF, 0x9D, 0x80, 0x40, 0xFF,
0x4C, 0x00, 0x40, 0xFF, 0x9D, 0x80, 0x40, 0xFF, 0x4C, 0x00, 0x40, 0xFF, 0x9D, 0x80, 0xE0, 0x08,
0xE2, 0x00, 0x00, 0x00, 0x90, 0x00, 0x94, 0x03, 0xE1, 0x00, 0xE0, 0x80, 0xF0, 0x00, 0x91, 0x01,
0x8E, 0x11, 0xA0, 0x04, 0xE0, 0x02, 0xE0, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

// Slave 1 Sequence
u8 lp5523_slave_1[] = {
0x00, 0x2A, 0x00, 0x20, 0x00, 0x08, 0x00, 0x02, 0x00, 0x10, 0x00, 0x04, 0x00, 0x01, 0x9C, 0x04,
0x9C, 0x86, 0xE2, 0x00, 0x40, 0xFF, 0x4C, 0x00, 0x40, 0x00, 0x9D, 0x80, 0x40, 0xFF, 0x4C, 0x00,
0x40, 0x00, 0x9D, 0x80, 0x40, 0xFF, 0x4C, 0x00, 0x40, 0x00, 0x9D, 0x80, 0xE0, 0x40, 0xE0, 0x08,
0x00, 0x00, 0x9C, 0x01, 0x9C, 0x83, 0xE2, 0x00, 0x40, 0xFF, 0x4C, 0x00, 0x40, 0xFF, 0x9D, 0x80,
0x40, 0xFF, 0x4C, 0x00, 0x40, 0xFF, 0x9D, 0x80, 0x40, 0xFF, 0x4C, 0x00, 0x40, 0xFF, 0x9D, 0x80,
0xE0, 0x08, 0x00, 0x00, 0x90, 0x00, 0x94, 0x01, 0xF0, 0x00, 0x91, 0x01, 0x8E, 0x11, 0xA0, 0x02,
0xE0, 0x02, 0xE0, 0x04, 0xE1, 0x00, 0xE0, 0x80, 0x90, 0x00, 0x94, 0x03, 0xA0, 0x02, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

// Slave 2 Sequence
u8 lp5523_slave_2[] = {
0x00, 0x2A, 0x00, 0x20, 0x00, 0x08, 0x00, 0x02, 0x00, 0x10, 0x00, 0x04, 0x00, 0x01, 0x9C, 0x04,
0x9C, 0x86, 0xE2, 0x00, 0x40, 0xFF, 0x4C, 0x00, 0x40, 0x00, 0x9D, 0x80, 0x40, 0xFF, 0x4C, 0x00,
0x40, 0x00, 0x9D, 0x80, 0x40, 0xFF, 0x4C, 0x00, 0x40, 0x00, 0x9D, 0x80, 0xE0, 0x40, 0xE0, 0x08,
0x00, 0x00, 0x9C, 0x01, 0x9C, 0x83, 0xE2, 0x00, 0x40, 0xFF, 0x4C, 0x00, 0x40, 0xFF, 0x9D, 0x80,
0x40, 0xFF, 0x4C, 0x00, 0x40, 0xFF, 0x9D, 0x80, 0x40, 0xFF, 0x4C, 0x00, 0x40, 0xFF, 0x9D, 0x80,
0xE0, 0x08, 0x00, 0x00, 0x90, 0x00, 0x94, 0x02, 0xF0, 0x00, 0x91, 0x01, 0x8E, 0x11, 0xA0, 0x02,
0xE0, 0x02, 0xE0, 0x04, 0xE1, 0x00, 0xE0, 0x80, 0x90, 0x00, 0x94, 0x03, 0xA0, 0x02, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

// Slave 3 Sequence
u8 lp5523_slave_3[] = {
0x00, 0x2A, 0x00, 0x20, 0x00, 0x08, 0x00, 0x02, 0x00, 0x10, 0x00, 0x04, 0x00, 0x01, 0x9C, 0x04,
0x9C, 0x86, 0xE2, 0x00, 0x40, 0xFF, 0x4C, 0x00, 0x40, 0x00, 0x9D, 0x80, 0x40, 0xFF, 0x4C, 0x00,
0x40, 0x00, 0x9D, 0x80, 0x40, 0xFF, 0x4C, 0x00, 0x40, 0x00, 0x9D, 0x80, 0xE0, 0x40, 0xE0, 0x08,
0x00, 0x00, 0x9C, 0x01, 0x9C, 0x83, 0xE2, 0x00, 0x40, 0xFF, 0x4C, 0x00, 0x40, 0xFF, 0x9D, 0x80,
0x40, 0xFF, 0x4C, 0x00, 0x40, 0xFF, 0x9D, 0x80, 0x40, 0xFF, 0x4C, 0x00, 0x40, 0xFF, 0x9D, 0x80,
0xE0, 0x08, 0x00, 0x00, 0x90, 0x00, 0x94, 0x03, 0xF0, 0x00, 0x91, 0x01, 0x8E, 0x11, 0xA0, 0x02,
0xE0, 0x02, 0xE0, 0x04, 0xE1, 0x00, 0xE0, 0x80, 0x90, 0x00, 0x94, 0x03, 0xA0, 0x02, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

// Default patterns
static struct pattern_info pattern_boot_master = {
		.data = lp5523_master,
		.size = sizeof(lp5523_master) / sizeof(lp5523_master[0]),
		.engine1_start = 0x07,
		.engine2_start = 0x19,
		.engine3_start = 0x2A,
		.address_list = { LP5523_DRIVER_1_ADDR, 0x0 }
};

static struct pattern_info pattern_boot_slave_1 = {
		.data = lp5523_slave_1,
		.size = sizeof(lp5523_slave_1) / sizeof(lp5523_slave_1[0]),
		.engine1_start = 0x07,
		.engine2_start = 0x19,
		.engine3_start = 0x2A,
		.address_list = { LP5523_DRIVER_2_ADDR, 0x0 }
};

static struct pattern_info pattern_boot_slave_2 = {
		.data = lp5523_slave_2,
		.size = sizeof(lp5523_slave_2) / sizeof(lp5523_slave_2[0]),
		.engine1_start = 0x07,
		.engine2_start = 0x19,
		.engine3_start = 0x2A,
		.address_list = { LP5523_DRIVER_3_ADDR, 0x0 }
};

static struct pattern_info pattern_boot_slave_3 = {
		.data = lp5523_slave_3,
		.size = sizeof(lp5523_slave_3) / sizeof(lp5523_slave_3[0]),
		.engine1_start = 0x07,
		.engine2_start = 0x19,
		.engine3_start = 0x2A,
		.address_list = { LP5523_DRIVER_4_ADDR, 0x0 }
};

#endif
