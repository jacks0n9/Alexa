
  utils.importFile("src/CcasereadVersion.js");

  /* Read the Package Name */
  
  var xmlTree= xdc.loadXML(".\\package\\package.bld.xml");
  if(xmlTree == undefined)
  { 
     print("Could not load the XML file, Please rebuild the package and try"); 
     java.lang.System.exit(1);
  }
  else
  {
    var argsName= xmlTree.@name;  
  }

/* Get the Version */
var warningBuffer = new Array();
var value=readVersion(argsName);
var moduleName=argsName.split(".");
var packageName=moduleName[moduleName.length-1];
value=value.toString().replace(/\s/g, "");
value2=value.toString().replace(/\,/g, ".");
value1=value.toString().replace(/\./g, "_");
var srcFile = "docs\\doxygen\\html\\index.html"; 
var modFile = "docs\\doxygen\\html\\"+packageName+"_"+value1+returnQualityString(argsName)+"_release_notes.html";
var dstFile = packageName+"_"+value1+returnQualityString(argsName)+"_release_notes.html";
var matchstring = packageName+"_"+value1;
var fileExists = xdc.findFile(".\\"+dstFile);
var date=new java.util.Date();
var months = new Array('January','February','March', 'April','May','June','July','August','September', 'October','November','December');

    /* copy the environment array from the current environment */
    var env   = java.lang.System.getenv();
    var keys  = env.keySet().toArray();
    var key;
    var stat={};
    var env_j=[];
    for (var i = 0; i < keys.length; i++) {
         key = keys[i];
      if (env.get(key) == "") {
             continue;
         }
         env_j = env_j.concat([key + '=' + env.get(key)]);
     }
   var attrs = {
        envs: env_j
   }
 
  var command;

var fileModule = xdc.module('xdc.services.io.File');
var openedFile;
try{
   openedFile = fileModule.open(srcFile, "r");
 } catch (ex)
 {
   print(srcFile + " cannot be read");
 }

var writeFile;
try{
   writeFile = fileModule.open(modFile, "w");
 } catch (ex)
 {
   print(modFile + " cannot be written to. Please check Writing Permissions.");
 }

 var readLine;
 while((readLine=openedFile.readLine()) != null)
 {
   if(readLine.match("Main Page"))
   {
      readLine=readLine.replace(/Main Page/,packageName.toString().toUpperCase()+" "+ value2+returnQualityString(argsName).replace("_"," ")+" Release Notes");
   } 
   if(readLine.match("<!-- Generated by Doxygen 1.5.1-p1 -->"))
   {
         writeFile.writeLine(readLine);
         readLine = "<h1 align=\"center\"><a name=\"XDC_TOP\"><\/a>"+ packageName.toString().toUpperCase()+" "+ value2+returnQualityString(argsName).replace("_"," ")+" Release Notes"+"<\/h1>";
         writeFile.writeLine(readLine);
         readLine="<h2 align=\"center\">"+ months[date.getMonth()]+" "+ date.getDate()+", "+(date.getYear()+1900)+"<\/h2>";
    } 
   if(readLine.match("tilogo.gif"))
   {
      readLine=readLine.replace(/tilogo.gif/,"docs/relnotes_archive/tilogo.gif");
   }
  if(readLine.match("titagline.gif"))
   {
      readLine=readLine.replace(/titagline.gif/,"docs/relnotes_archive/titagline.gif");
   }
   writeFile.writeLine(readLine);
 }

 var dirExists = xdc.findFile(".\\docs\\relnotes_archive");
 if(!dirExists)
   {
      print("Checking out docs directory"); 
      command="cleartool.exe co -reserved -c \"Add relnotes_archive Directory\" docs";
      xdc.exec(command,attrs,stat);
      if( (stat.output).match("Error:") )
      {
          if(!(stat.output).match("is already checked out"))
          {
             print(stat.output);
             java.lang.System.exit(1);
          }
      } 
      
      print("Creating relnotes_archive Directory.....");      
      command="cleartool.exe mkdir -c \"Create Release Archive Directory\" docs\\relnotes_archive";
      xdc.exec(command,attrs,stat);
      if( (stat.output).match("Error:") )
      {
         print(stat.output);
         java.lang.System.exit(1);
      } 
      
      /* Copy titagline.gif */
      command="cp.exe -f docs\\doxygen\\html\\titagline.gif docs\\relnotes_archive\\titagline.gif";
      xdc.exec(command,attrs,stat); 
      if( (stat.output).match("Error:") )
      {
         print(stat.output);
         java.lang.System.exit(1);
      } 

      /* Copy tilogo.gif */
      command="cp.exe -f docs\\doxygen\\html\\tilogo.gif docs\\relnotes_archive\\tilogo.gif";
      xdc.exec(command,attrs,stat);
      if( (stat.output).match("Error:") )
      {
         print(stat.output);
         java.lang.System.exit(1);
      } 

      command="cleartool.exe co -reserved -c \"Add Release Notes Images to relnotes_archive Directory\" docs\\relnotes_archive";
      xdc.exec(command,attrs,stat);
      if( (stat.output).match("Error:") )
      {
          if(!(stat.output).match("is already checked out"))
          {
             print(stat.output);
             java.lang.System.exit(1);
          }
      }       
      
      /* Add titagline.gif to source control */
      command="cleartool.exe mkelem -c \"Release Notes Images \" docs\\relnotes_archive\\titagline.gif";      
      xdc.exec(command,attrs,stat); 
      if( (stat.output).match("Error:") )
      {
         print(stat.output);
         java.lang.System.exit(1);
      } 
      /* Add tilogo.gif to source control */
      command="cleartool.exe mkelem -c \"Release Notes Images \" docs\\relnotes_archive\\tilogo.gif";      
      xdc.exec(command,attrs,stat); 
      if( (stat.output).match("Error:") )
      {
         print(stat.output);
         java.lang.System.exit(1);
      }       
            
   }
/* Check if file differs only in quality */
if(!fileExists)
{
   var file = new java.io.File(".");
   var list = file.list();
   var i, j;
   for (i = 0, j = 0; i < list.length; i++) {
     if (list[i].match("_release_notes.html") != null && list[i].match("_release_notes.html.") == null) {
     
      if(list[i].match(matchstring)|| list[i].match("beta") || list[i].match("alpha") || list[i].match("prealpha"))
      {
      command="cleartool.exe co -reserved -c \"renaming the release notes\" .";
      print(command);
      xdc.exec(command,attrs,stat);
      if( (stat.output).match("Error:") )
      {
          if(!(stat.output).match("is already checked out"))
          {
             print(stat.output);
             java.lang.System.exit(1);
          }
      }
      command="cleartool.exe mv -c \"renaming the release notes\" "+list[i]+" "+ dstFile;   
      print(command);
      xdc.exec(command,attrs,stat);
      if( (stat.output).match("Error:") )
      {
         print(stat.output);
         java.lang.System.exit(1);
         
      }         
      fileExists=true; 
      
      }
     }
    }
      
 }
   

if(!fileExists)
{
  /* Move old Release notes under release_archive
     1) Check if there is relnotes_archive under docs directory.
     2) If not create relnotes_archive directory and add it to source control.
     3) Move the old release notes under relnotes_archive directory
  */
     
 
   var file = new java.io.File(".");
   var list = file.list();
   var i, j;
   for (i = 0, j = 0; i < list.length; i++) {
     if (list[i].match("_release_notes.html") != null && list[i].match("_release_notes.html.") == null) {
      
      command="cleartool.exe co -reserved -c \"Move Old release notes to relnotes_archive folder\" .";
      print(command);
      xdc.exec(command,attrs,stat);
      if( (stat.output).match("Error:") )
      {
          if(!(stat.output).match("is already checked out"))
          {
             print(stat.output);
             java.lang.System.exit(1);
          }
      }

     /* Check out relnotes_archive directory */
      command="cleartool.exe co -reserved -c \"Add release notes to relnotes_archive Directory\" docs\\relnotes_archive";
      print(command);
      xdc.exec(command,attrs,stat);
      if( (stat.output).match("Error:") )
      {
          if(!(stat.output).match("is already checked out"))
          {
             print(stat.output);
             java.lang.System.exit(1);
          }
      } 

      command="cleartool.exe mv -c \"Move to Release Archive Directory\" "+list[i]+" docs\\relnotes_archive\\"+list[i];
      xdc.exec(command,attrs,stat);
      if( (stat.output).match("Error:") )
      {
         print(stat.output);
         java.lang.System.exit(1);
      } 
      /* Modify the old release notes for the relative address */
      var oldReleaseFile = "docs\\relnotes_archive\\"+list[i];
      command="cleartool.exe co -reserved -c \"Add relnotes_archive Directory\" "+ oldReleaseFile;
      xdc.exec(command,attrs,stat);
      if( (stat.output).match("Error:") )
      {
          if(!(stat.output).match("is already checked out"))
          {
             print(stat.output);
             java.lang.System.exit(1);
          }
      } 

    var openedFile;
    try{
       openedFile = fileModule.open(oldReleaseFile, "r");
    } catch (ex)
    {
        print(srcFile + " cannot be read");
     }

    var writeFile;
    try{
        writeFile = fileModule.open("docs\\relnotes_archive\\temp.html", "w");
    } catch (ex)
    {
        print(modFile + " cannot be written to. Please check Writing Permissions.");
    }

   var readLine
   while((readLine=openedFile.readLine()) != null)
   {
      if(readLine.match("\=\"docs\/"))
      {
         readLine=readLine.replace(/docs/,"..");
         
      } 
      writeFile.writeLine(readLine);
    }
    
  /* command="bin/cp.exe -f docs\\relnotes_archive\\temp.html "+oldReleaseFile;*/
   command="cmd.exe /c copy /y docs\\relnotes_archive\\temp.html "+oldReleaseFile;
   xdc.exec(command,attrs,stat);
   if((stat.output).match("Error:"))
   {
     print(stat.output);
     java.lang.System.exit(1);
   } 

   command="rm.exe docs\\relnotes_archive\\temp.html";
   xdc.exec(command,attrs,stat);
   if((stat.output).match("Error:"))
   {
     print(stat.output);
     java.lang.System.exit(1);
   } 

  }
 }
 
  /*Copy New Release notes */
  command="cp.exe -f "+modFile+" .\\"+dstFile;

  xdc.exec(command,attrs,stat);
  if((stat.output).match("Error:"))
  {
     print(stat.output);
     java.lang.System.exit(1);
  } 


  command="cleartool.exe co -reserved -c \"Add release notes file\" ..\\"+ packageName;
  xdc.exec(command,attrs,stat);
  if((stat.output).match("Error:"))
  {
    
    if(!(stat.output).match("is already checked out"))
    {
       print(stat.output);
       java.lang.System.exit(1);
    }
  } 
 
  /* Add the release notes to the source control */
  command="cleartool.exe mkelem -c \"Release Notes \" "+dstFile;
  xdc.exec(command,attrs,stat);
  if( (stat.output).match("Error:") )
  {
    var pattern="Entry named \""+dstFile+"\" already exists.";
    /* If the file is already not member of clearcase EXIT*/
    if(!(stat.output).match(pattern))
    {
       print(stat.output);
       java.lang.System.exit(1);
    }
  } 
 
}
else
{
 /* file exists replace the current file */
  print(dstFile+" Exists"); 
  command="cleartool.exe lsco " + dstFile;
 /* Check if the the file is check-out */
  print(command);
  xdc.exec(command,attrs,stat);
  if(!stat.output)
  {
    print(dstFile+" is not check out");    
    print("Check out "+ dstFile);    
    command="cleartool.exe co -reserved -c \"Modify Release Notes\" " + dstFile;
    xdc.exec(command,attrs,stat);
    if( (stat.output).match("Error:") )
    {
       print(stat.output);
       java.lang.System.exit(1);
    } 
  }
  else if( (stat.output).match("Error:") )
  {
     print(stat.output);
     java.lang.System.exit(1);
  } 
  
  /* copy */
  command="cp.exe -f "+modFile+" .\\"+dstFile;
  xdc.exec(command,attrs,stat);
  print(stat.output);
  
  
}











