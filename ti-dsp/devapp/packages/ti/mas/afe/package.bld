/******************************************************************************
 * FILE PURPOSE:  Build description for package ti.mas.afe
 ******************************************************************************
 * FILE NAME:     package.bld
 *
 * DESCRIPTION:   This file contains attributes to build and create releases
 *                for ti.mas.afe package
 *
 * Copyright (c) 2007, Texas Instruments, Inc.
 ******************************************************************************/

/* List of XDC files to be delivered as part of source/object release */
var afe_src_xdc_files = [
  "package.bld",
  "Makedocs.mk"
];

var afe_obj_xdc_files = [
  "package.xdc",
  "package.xs"
];

/* List of documents to be delivered as part of object release */
var afe_obj_docs_files =   "docs/doxygen/html";

/* List of documents to be delivered as part of source release */
var afe_src_docs_files = [
  "docs/doxygen/APIDoxyfile",
  "docs/doxygen/Doxyfile",
  "docs/doxygen/doxygen.h",
  "docs/doxygen/tifooter.htm",
  "docs/doxygen/tiheader.htm",
  "docs/doxygen/tilogo_tmp.gif",
  "docs/doxygen/titagline_tmp.gif"
];




  /* C source code that need more code size optimization */
  var audio_c_files = [
    "../audio/UnitTestHandler.cpp",
    "../audio/Common/modeParam.cpp",
    "../audio/Common/frame.cpp",
    "../audio/Common/fixed_pt.cpp",
    "../audio/Common/TickCounter_if.cpp",
    ];

    var audio_h_files = [
    "../audio/Common/AudioFrame.h",
    "../audio/Common/Deque_AudioPtr.h",
    "../audio/Common/fixed_pt.h",
    "../audio/Common/modeParam.h",
    "../audio/Common/smartptr_AudioFrame.h",
    "../audio/Common/smartptr_Word16.h",
    ];


/* List of Algorithm header files */
var algo_h_files = [
  "../inc/types.h",
  "../inc/frame.h",
  "../inc/ctrlMsg.h",
  "../inc/evtLog.h",
  "../inc/control.h",
  "../inc/dataLog.h"
];

/* List of Algorithms Source files */
var algo_c_files = [
  "../mix/mixer.c",
  "../mix/control.c",
  "../tools/evtLog.c",
  "../tools/dataLog.c"
];

/* List of AFE header source files */
var afe_h_files = [
  "afe.h",
  "src/afedbg.h",
  "src/afedev.h",
  "src/afedevalg.h",
  "src/afedevloc.h",
  "src/afeinstru.h",
  "src/afeloc.h",
  "src/afeswcfg.h",
  "src/afeutl.h",
  "src/hal.h",
  "src/halloc.h",
  "src/ecodrv/afehal.h"
];

/* List of AFE C source files */
var afe_c_files = [
  "src/afe.c",
  "src/afeialg.c",
  "src/afehwcfg.c",
  "src/afetdmcfg.c",
  "src/afeinit.c",
  "src/halinit.c",
  "src/afeinstru.c",
  "src/afedev.c",
  "src/ecodrv/afehal.c",
];



/* List of AFE DM3730 SoC source files */
var afe_dm3730_src_files = [
  "src/c64P/DM3730/hal.c",
  "src/c64P/DM3730/tdm/haltdm.c",
  "src/c64P/DM3730/tdm/tdmctrl.c",
  "src/c64P/DM3730/tdm/tdmisr.c",
  "src/c64P/DM3730/tdm/mcbsp.c"
];

/* List of AFE LEO SoC header files */
var afe_dm3730_h_files = [
  "src/c64P/DM3730/halport.h",
  "src/c64P/DM3730/tdm/tdm.h",
  "src/c64P/DM3730/tdm/haltdm.h",
  "src/c64P/DM3730/tdm/tdminit.h",
  "src/c64P/DM3730/tdm/tdmloc.h"
];

/*
 * List of AFE interface and module header files
 * to be delivered as part of any delivery,
 */
var afe_iface_files = [
  "afe.h"
];
/*******************************************************************************
  The main package.bld routine starts here
*******************************************************************************/
var Pkg = xdc.useModule('xdc.bld.PackageContents');

/* Set up version numbers for this package */
var version = [1,0,0,0];

/* generate version.xdc based on the version array above */
var tplt = xdc.loadTemplate('ti/mas/swtools/Version.xdt');
tplt.genFile('Version.xdc', Pkg, version);
Pkg.generatedFiles = ["Version.xdc"];

/* Include custom makefile to generate doxygen documents */
Pkg.makePrologue = "include Makedocs.mk";

/* AFE supports following target architectures */
targets = [C64P];

/* Requested target architecture, initialized to empty */
targs = [];

/* Release tarball target extension */
var ext = "";

/* Delivery whether source or object: default is object */
var delivery = "obj";

/* Release type: debug or release default is release */
var reltype = "release";

/* Chip type: dm3730 default is dm3730 */
var chiptype = "dm3730";

/* Exit flag */
var exitflag = 0;

/* Get XDC arguments */
var args_xs = java.lang.System.getenv("ARGS_XS");
if (args_xs != null) {
  var getArgs = xdc.loadCapsule(args_xs);
  getArgs.getPkgArgs(Pkg.name, arguments);
  getArgs.showPkgArgs(Pkg.name, arguments);
}
else {
  /* Use XDCARGS passed in from build command */
  print ("NO ARGS SCRIPT ENV VAR SPECIFIED");
}

/*
 * Function to create release based on the option supplied
 */
function createRelease (targets, delivery, ext, reltype, chiptype)
{
  var i = 0, j = 0;
  var releaseName = "ti_mas_afe_" + delivery + "_" + ext + "_" + version[0] +
                    "_" + version[1] + "_" + version[2] + "_" + version[3];
  var fileArray = [];

  for (i = 0; i < targets.length; i++) {
    var targ = targets[i];
    switch (targ) {
      case C64P:
      {
        if (chiptype == "dm3730") {
            var debugLibAttr = {
              copts: " -g --no_compress -q -pdv -pden " +
                     " --disable:sploop " +
                     " -I../inc -I../audio -I../audio/AudioFrontEndModule" +
                     " -I../audio/SigTransfLIB -I../audio/MathLIB -I../audio/FilterLIB -I../audio/SigMeasLIB" +
                     " -I../audio/Common -I../audio/FullSystemControllerModule",
              aopts: " -g -ea.s -c -k -mi200 -mv64+ -pm ",
              defs:  " -DGG_AICDM3730 -DHAL_INCLUDE_AIC -DDBGLEV=1 -DDM3730 -Dti_targets_C64P -DMAX_DSPS=1" +
                     " -DFRAMEWORK_FW -DUSE_INTRINSICS" +
                     " -DAEC_OPTZ_FFT_128 -DSTFT_AEC_OPTZ_FFT_256 -DSDB_CVX_LKP_TBL -DCLK_CORRECTION"
            }
            var releaseLibAttr = {
              copts: " -c -k -q --mem_model:data=far -al -pds1111 " +
                     " -pds827 -pds824 -pds837 -pds1037 -pds195 -pdsw225 " +
                     " -pdsw994 -pdsw262 -pds77 -pden --consultant -mt " +
                     " -mw -os -o3 --optimize_with_debug -mh1023 " +
                     " -mi10000 -as " +
                     " -I../inc -I../audio -I../audio/AudioFrontEndModule" +
                     " -I../audio/SigTransfLIB -I../audio/MathLIB -I../audio/FilterLIB -I../audio/SigMeasLIB" +
                     " -I../audio/Common -I../audio/FullSystemControllerModule",
              aopts: " -ea.s -c -k -mi200 -mv64+ -pm ",
              defs:  " -DDM3730 -Dti_targets_C64P -DMAX_DSPS=1" +
                     " -DFRAMEWORK_FW -DUSE_INTRINSICS" +
                     " -DAEC_OPTZ_FFT_128 -DSTFT_AEC_OPTZ_FFT_256 -DSDB_CVX_LKP_TBL -DCLK_CORRECTION"
            }
        }

        var dstDir = "c" + targ.suffix;
        var srcDir = "c" + targ.suffix;
        if (reltype == "debug") {
          var clib = Pkg.addLibrary (dstDir + "/afe_c", targ, debugLibAttr);
        }
        else {
          var clib = Pkg.addLibrary (dstDir + "/afe_c", targ, releaseLibAttr);
        }

        /* Add C source code to be compiled and build */
        clib.addObjects (afe_c_files);

        /* Add C source code from Algorithms */
        clib.addObjects (algo_c_files);

        /* Add C source code from Audio */
        clib.addObjects (audio_c_files);

        if (chiptype == "dm3730") {
            /* Add assembly code to be compiled and build */
            clib.addObjects (afe_dm3730_src_files);
        }

        /* Add library created */
        fileArray[i] = "c" + targ.suffix + "/afe_c.a" + targ.suffix;
      }
      break;
      default:
        print ("NO TARGET SPECIFIED");
    } /* switch */
  } /* for */

  /* Add common files to source and object delivery to fileArray */
  var j = targets.length;
  for (i = 0; i < afe_obj_xdc_files.length; i++, j++) {
    fileArray[j] = afe_obj_xdc_files[i];
  }

  /* Add AFE iface files to be included for obj delivery */
  for (i = 0; i < afe_iface_files.length; i++, j++) {
    fileArray[j] = afe_iface_files[i];
  }

  if (delivery == "obj") {
    var obj = Pkg.addRelease(releaseName,{compress: false, archiver: "zip"});
    fileArray[j++] = afe_obj_docs_files;
    obj.otherFiles = fileArray;
    Pkg.defaultRelease = obj;
  }

  if (delivery == "src") {

    fileArray[j++] = afe_obj_docs_files;

    var n = fileArray.length, m = 0;

    /* Add AFE c files to be included for src delivery */
    for (m = 0; m < afe_c_files.length; m++, n++) {
      fileArray[n] = afe_c_files[m];
    }

    /* Add AFE c files to be included for src delivery */
    for (m = 0; m < algo_c_files.length; m++, n++) {
      fileArray[n] = algo_c_files[m];
    }

    /* Add AFE c files to be included for src delivery */
    for (m = 0; m < audio_c_files.length; m++, n++) {
      fileArray[n] = audio_c_files[m];
    }
    /* Add AFE h files to be included for src delivery */
    for (m = 0; m < afe_h_files.length; m++, n++) {
      fileArray[n] = afe_h_files[m];
    }

    /* Add Algo h files to be included for src delivery */
    for (m = 0; m < algo_h_files.length; m++, n++) {
      fileArray[n] = algo_h_files[m];
    }

    /* Add Algo h files to be included for src delivery */
    for (m = 0; m < audio_h_files.length; m++, n++) {
      fileArray[n] = audio_h_files[m];
    }

    /* Add AFE soc src files to be included for src delivery */
    for (m = 0; m < afe_dm3730_src_files.length; m++, n++) {
      fileArray[n] = afe_dm3730_src_files[m];
    }

    /* Add AFE soc h files to be included for src delivery */
    for (m = 0; m < afe_dm3730_h_files.length; m++, n++) {
      fileArray[n] = afe_dm3730_h_files[m];
    }

    /* Add AFE src docs files to be included for src delivery */
    for (m = 0; m < afe_src_docs_files.length; m++, n++) {
      fileArray[n] = afe_src_docs_files[m];
    }

    /* Add AFE src xdc files to be included for src delivery */
    for (m = 0; m < afe_src_xdc_files.length; m++, n++) {
      fileArray[n] = afe_src_xdc_files[m];
    }

    var obj = Pkg.addRelease(releaseName,{compress: false, archiver: "zip"});
    obj.otherFiles = fileArray;
    Pkg.defaultRelease = obj;
  }
}

/*
 * Function to print the usage string for XDCARGS of AFE's package.bld file
 */
function printUsage()
{
  print ("xdc XDCARGS=\"<options>\" [gendocs] [genapidocs] [release]");
  print ("  Where the <options> are as follows:");
  print ("    [mandatory] c64P         - compile AFE for c64x+ target");
  print ("    [optional]  obj or src   - Used only when release is specified");
  print ("                               obj generates object tarball");
  print ("                               src generates source tarball");
  print ("                               default is src");
  print ("    [optional]  debug        - compile AFE for debugging");
  print ("  release     - generates source/object tarball for release with documentation");
  print ("  gendocs     - generates AFE implementation and API documentation");
  print ("                in afe\docs\doxygen\AFE.chm");
  print ("  genapidocs  - generate AFE's API documenation in afe\docs\doxygen\AFEAPI.chm");
  print ("  ");
  print ("By default AFE library is compiled for full optimization");
  print ("     e.g., 'xdc XDCARGS=\"c64P\"' will generate: ");
  print ("            (a) c64P\\afe_c.a64P library");
  print ("  ");
}

/* Parse the arguments supplied to package.bld */
/* NOTE: the arguments could be supplied in any order */
for (var k = 0; k < arguments.length; k++) {
  switch (arguments[k]) {
    case "all":
      print ("AFE WILL BE BUILD FOR ALL SUPPORTED TARGET ARCHITECTURES");
      targs = [C64P];
      break;
    case "c64Ple":
      print ("AFE WILL BE BUILD FOR C64+ ARCHITECTURE");
      targs = [C64P];
      ext = "c64P";
      break;
    case "obj":
      print ("IF THIS IS RELEASE: OBJECT RELEASE WILL BE CREATED");
      delivery = "obj";
      break;
    case "src":
      print ("IF THIS IS RELEASE: SOURCE RELEASE WILL BE CREATED");
      delivery = "src";
      break;
    case "debug":
      print ("AFE WILL BE COMPILED FOR DEBUGGING");
      reltype = "debug";
      break;
    case "help":
      printUsage();
      break;
    default:
      print ("Invalid argument supplied : " + arguments[k]);
      printUsage();
      exitflag = 1;
      break;
  }
}

if (arguments.length == 0) {
  printUsage();
  exitflag = 1;
}

if (exitflag == 0) {
  createRelease (targs, delivery, ext, reltype, chiptype);
}

/* clean target */
Pkg.makeEpilogue += "clean::\n\t-$(RM) -f ti_mas_afe_*.tar\n";
Pkg.makeEpilogue += "clean::\n\t-$(RM) Version.xdc\n";
Pkg.makeEpilogue += "clean::\n\t-$(RM) -f .xdcenv.mak\n";
Pkg.makeEpilogue += "clean::\n\t-$(RM) -f afedcutil.s\n";
Pkg.makeEpilogue += "clean::\n\t-$(RMDIR) c64P\n";

/* nothing past this point */

