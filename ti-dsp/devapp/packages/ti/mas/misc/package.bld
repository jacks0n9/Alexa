/******************************************************************************
 * FILE PURPOSE:  Build description for package ti.mas.misc
 ******************************************************************************
 * FILE NAME:     package.bld
 *
 * DESCRIPTION:   This file contains attributes to build and create releases
 *                for misc package
 *
 * Copyright (c) 2007, Texas Instruments, Inc.
 ******************************************************************************/

/* List of XDC files to be delivered as part of source/object release */
var misc_src_xdc_files = [
  "package.bld",
  "Makedocs.mk"
];

var misc_obj_xdc_files = [
  "package.xdc",
  "package.xs"
];

/* List of documents to be delivered as part of object release */
var misc_obj_docs_files = "docs/doxygen/html";

/* List of documents to be delivered as part of source release */
var misc_src_docs_files = [
  "docs/doxygen/APIDoxyfile",
  "docs/doxygen/Doxyfile",
  "docs/doxygen/doxygen.h",
  "docs/doxygen/tifooter.htm",
  "docs/doxygen/tiheader.htm",
  "docs/doxygen/tilogo_tmp.gif",
  "docs/doxygen/titagline_tmp.gif"
];

/*
 * List of MISC header files to be delivered as part of source delivery,
 * other than MISC module headers
 */
var misc_h_files = [
  "src/misc_priv.h"
];

/* List of MISC C source files */
var misc_c_files = [
  "src/misc_ialg.c",
  "src/dspwdt.c",
];

/*
 * List of MISC interface and module header files 
 * to be delivered as part of any delivery,
 */
var misc_iface_files = [
  "misc.h",
  "miscwdt.h",
];

/*******************************************************************************
  The main package.bld routine starts here 
*******************************************************************************/

/* Set up version numbers for this package */
var version = [1,0,0,0];

/* generate version.xdc based on the version array above */
var tplt = xdc.loadTemplate('ti/mas/swtools/Version.xdt');
tplt.genFile('Version.xdc', Pkg, version);
Pkg.generatedFiles = ["Version.xdc"];

/* Include custom makefile to generate doxygen documents */
Pkg.makePrologue = "include Makedocs.mk";

/* MISC supports following target architectures */
targets = [C64P];

/* Requested target architecture, initialized to empty */
targs = [];

/* Release tarball target extension */
var ext = "";

/* Delivery whether source or object: default is object */
var delivery = "obj";

/* Release type: debug or release default is release */
var reltype = "release";

/* Exit flag */
var exitflag = 0;

/* Get XDC arguments */
var args_xs = java.lang.System.getenv("ARGS_XS");
if (args_xs != null) {
  var getArgs = xdc.loadCapsule(args_xs);
  getArgs.getPkgArgs(Pkg.name, arguments);
  getArgs.showPkgArgs(Pkg.name, arguments);
}
else {
  /* Use XDCARGS passed in from build command */
  print ("NO ARGS SCRIPT ENV VAR SPECIFIED");
}

var dsp_timeout_flag = java.lang.System.getenv("TEST_DSP_TIMEOUT");
if (dsp_timeout_flag == null) {
  dsp_timeout_flag = 0;
}
  

/*
 * Function to create release based on the option supplied
 */
function createRelease (targets, delivery, ext, reltype)
{
  var i = 0, j = 0;
  var releaseName = "ti_mas_misc_" + delivery + "_" + ext + "_" + version[0] +
                    "_" + version[1] + "_" + version[2] + "_" + version[3];
  var fileArray = [];

  for (i = 0; i < targets.length; i++) {
    var targ = targets[i];
    switch (targ) {
      case C64P:
      {      	    
        var debugLibAttr = {
          copts: " -g --no_compress -q -pdr -pdv -pden -ml3 " + 
                 " --disable:sploop -DTEST_DSP_TIMEOUT=" + dsp_timeout_flag ,
          aopts: " -g -ea.s -c -k -mi200 -ml3 -mv64+ -pm ",
          defs:  " -DDBGLEV=1 "
        }
      
        var releaseLibAttr = {
          copts: " -c -k -q --mem_model:data=far -al -pds1111 " +
                 " -pds827 -pds824 -pds837 -pds1037 -pds195 -pdsw225 " +
                 " -pdsw994 -pdsw262 -pds77 -pden --consultant -mt " +
                 " -mw -os -o3 --optimize_with_debug -g -mh1023 " +
                 " -mi10000 -as -ss -DTEST_DSP_TIMEOUT=" + dsp_timeout_flag ,
          aopts: " -g -ea.s -c -k -mi200 -ml3 -mv64+ -pm ",
          defs:  ""
        }

        var dstDir = "c" + targ.suffix;
        var srcDir = "c" + targ.suffix;
        if (reltype == "debug") {
          var clib = Pkg.addLibrary (dstDir + "/misc_c", targ, debugLibAttr);
        }
        else {
          var clib = Pkg.addLibrary (dstDir + "/misc_c", targ, releaseLibAttr);
        }
        
        /* Add C source code to be compiled and build */
        clib.addObjects (misc_c_files);
                   
        /* Add library created */
        fileArray[i] = "c" + targ.suffix + "/misc_c.a" + targ.suffix;
      }
      break;
      default:
        print ("NO TARGET SPECIFIED");
    }
  }

  /* Add common files to source and object delivery to fileArray */
  var j = targets.length;
  for (i = 0; i < misc_obj_xdc_files.length; i++, j++) {
    fileArray[j] = misc_obj_xdc_files[i];
  }

  /* Add MISC iface files to be included for obj delivery */
  for (i = 0; i < misc_iface_files.length; i++, j++) {
    fileArray[j] = misc_iface_files[i];
  }

  fileArray[j++] = misc_obj_docs_files;
 
  if (delivery == "src") {

    var n = fileArray.length, m = 0;

    /* Add MISC c files to be included for src delivery */
    for (m = 0; m < misc_c_files.length; m++, n++) {
      fileArray[n] = misc_c_files[m];
    }

    /* Add MISC h files to be included for src delivery */
    for (m = 0; m < misc_h_files.length; m++, n++) {
      fileArray[n] = misc_h_files[m];
    }
    
    /* Add MISC src docs files to be included for src delivery */
    for (m = 0; m < misc_src_docs_files.length; m++, n++) {
      fileArray[n] = misc_src_docs_files[m];
    }

    /* Add MISC src xdc files to be included for src delivery */
    for (m = 0; m < misc_src_xdc_files.length; m++, n++) {
      fileArray[n] = misc_src_xdc_files[m];
    }   
  }

  var obj = Pkg.addRelease(releaseName,{compress: false, archiver: "zip"});
  obj.otherFiles = fileArray;
  Pkg.defaultRelease = obj;
}

/*
 * Function to print the usage string for XDCARGS of MISC's package.bld file
 */
function printUsage()
{
  print ("xdc XDCARGS=\"<options>\" [gendocs] [genapidocs] [release]");
  print ("  Where the <options> are as follows:");
  print ("    [mandatory] c64P         - compile MISC for c64x+ target");
  print ("    [optional]  obj or src   - Used only when release is specified");
  print ("                               obj generates object tarball");
  print ("                               src generates source tarball");
  print ("                               default is src");
  print ("    [optional]  debug        - compile MISC for debugging");
  print ("  release     - generates source/object tarball for release with documentation");
  print ("  gendocs     - generates MISC implementation and API documentation");
  print ("                in misc\docs\doxygen\MISC.chm");
  print ("  genapidocs  - generate MISC's API documenation in misc\docs\doxygen\MISCAPI.chm");
  print ("  ");
  print ("By default MISC library is compiled for full optimization");
  print ("     e.g., 'xdc XDCARGS=\"c64P\"' will generate: ");
  print ("            (a) c64P\\misc_c.a64P library");
  print ("  ");
}

/* Parse the arguments supplied to package.bld */
/* NOTE: the arguments could be supplied in any order */
for (var k = 0; k < arguments.length; k++) {
  switch (arguments[k]) {
    case "all":
      print ("MISC WILL BE BUILD FOR ALL SUPPORTED TARGET ARCHITECTURES");
      targs = [C64P];
      break;
    case "c64Ple":
      print ("MISC WILL BE BUILD FOR C64+ ARCHITECTURE");
      targs = [C64P];
      ext = "c64P"
      break;
    case "obj":
      print ("IF THIS IS RELEASE: OBJECT RELEASE WILL BE CREATED");
      delivery = "obj";
      break;
    case "src":
      print ("IF THIS IS RELEASE: SOURCE RELEASE WILL BE CREATED");
      delivery = "src";
      break;
    case "debug":
      print ("MISC WILL BE COMPILED FOR DEBUGGING");
      reltype = "debug";
      break;
    case "help":
      printUsage();
      break;
    default:
      print ("Invalid argument supplied : " + arguments[k]);
      printUsage();
      exitflag = 1;
      break;
  }
}

if (arguments.length == 0) {
  printUsage();
  exitflag = 1;
}

if (exitflag == 0) {
  createRelease (targs, delivery, ext, reltype);
}

/* clean target */
Pkg.makeEpilogue += "clean::\n\t-$(RM) -f misc_*.tar\n";
Pkg.makeEpilogue += "clean::\n\t-$(RM) -f .xdcenv.mak\n";
Pkg.makeEpilogue += "clean::\n\t-$(RMDIR) c64P\n";

/* nothing past this point */

