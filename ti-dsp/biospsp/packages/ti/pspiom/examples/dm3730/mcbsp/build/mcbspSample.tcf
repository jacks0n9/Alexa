/* 
 * Copyright (c) 2009, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * */
/* 
 *  Copyright 2007
 *  Texas Instruments Incorporated
 *
 *  All rights reserved.  Property of Texas Instruments Incorporated
 *  Restricted rights to use, duplicate or disclose this code are
 *  granted through contract.
 * 
 */

/*
 * Now customize the generic platform with parameters specified above.
 */
utils.loadPlatform("ti.platforms.evm3530");

/* Memory map defined from dsplink/dsp/inc/DspBios/5.XX/OMAP3530/dsplink-omap3530-base.tci */
bios.MEM.instance("DDR2").base   = 0x87E00080;
bios.MEM.instance("DDR2").len    = 0x000FFF80;
bios.MEM.instance("DDR2").space  = "code/data";


/* Import driver TCI files */
utils.importFile("mcbspSample.tci");

/* Enable ECM Handler */
bios.ECM.ENABLE = 1;

/*  ===========================================================================
 *  Enable heaps and tasks
 *  ===========================================================================
 */
bios.enableMemoryHeaps(prog);
bios.enableTskManager(prog);


prog.module("GBL").C64PLUSCONFIGURE   = true;
/* set MAR register to cache external memory 0x80000000-0x8FFFFFFF */
prog.module("GBL").C64PLUSMAR128to159 = 0x0000ffff;

prog.module("GBL").ENABLEALLTRC    = false;
prog.module("GBL").PROCID          = 0;
/*  ===========================================================================
 *  Create heaps in memory segments that are to have heap
 *  ===========================================================================
 */
bios.DDR2.createHeap = true;
bios.DDR2.heapSize   = 0x40000; // 128K

bios.L1DSRAM.createHeap 			= true;
bios.L1DSRAM.enableHeapLabel		= true;
bios.L1DSRAM["heapLabel"]			= prog.extern("L1DHEAP");

/*  ===========================================================================
 *  MEM : startup and SWI stack size
 *  ===========================================================================
 */
prog.module("MEM").STACKSIZE = 0x1000;

/*  ===========================================================================
 *  Global Settings
 *  ===========================================================================
 */
prog.module("MEM").ARGSSIZE = 256;

/*  ===========================================================================
 *  Set all code and data sections to use DDR2
 *  ===========================================================================
 */
bios.setMemCodeSections (prog, bios.DDR2);
bios.setMemDataNoHeapSections (prog, bios.DDR2);
bios.setMemDataHeapSections (prog, bios.DDR2);

/*  ===========================================================================
 *  MEM : Global
 *  ===========================================================================
 */
prog.module("MEM").BIOSOBJSEG = bios.DDR2;
prog.module("MEM").MALLOCSEG  = bios.DDR2;

/*  ===========================================================================
 *  TSK : Global
 *  ===========================================================================
 */
prog.module("TSK").STACKSEG = bios.DDR2;

/* =============================================================================
 * --- LOG Module Commonly configured Global Properties ---
 * =============================================================================
 */
/*
 * --- LOG instances ---
 */
var trace     = prog.module("LOG").create("trace");
trace.bufLen  = 8192;

/* ECM configuration - manually Reflect these settings in soc.h */
bios.HWI.instance("HWI_INT7").interruptSelectNumber = 0;		
bios.HWI.instance("HWI_INT8").interruptSelectNumber = 1;		
bios.HWI.instance("HWI_INT9").interruptSelectNumber = 2;		
bios.HWI.instance("HWI_INT10").interruptSelectNumber = 3;		

/*task configuration*/
bios.TSK.create("echoTask");
bios.TSK.instance("echoTask").stackSize = 8192;
bios.TSK.instance("echoTask").priority = 5;
bios.TSK.instance("echoTask").fxn = prog.extern("mcbspDemoTask");
bios.TSK.instance("echoTask").comment = "Sample Application";

/*  ===========================================================================
 *  Generate configuration files...
 *  ===========================================================================
 */
if (config.hasReportedError == false) {
    prog.gen();
}

/*
 *  @(#) ti.sdo.ce.examples.servers.all_codecs; 1,0,0,80; 11-20-2007 13:27:33; /db/atree/library/trees/ce-i01x/src/
 */

/*
 *  @(#) ti.sdo.ce.wizards.genserver; 1, 0, 0,23; 6-3-2009 02:32:53; /db/atree/library/trees/ce/ce-n07x/src/
 */

